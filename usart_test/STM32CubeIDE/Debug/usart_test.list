
usart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003730  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003914  08003914  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003914  08003914  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003914  08003914  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003914  08003914  00013914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003918  08003918  00013918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800391c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  2000000c  08003928  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  08003928  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001154a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002081  00000000  00000000  00031586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00033608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  00034358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d3dc  00000000  00000000  00034fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a47  00000000  00000000  000523bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afd13  00000000  00000000  00063e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00113b16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f8  00000000  00000000  00113b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080038a0 	.word	0x080038a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080038a0 	.word	0x080038a0

080001c8 <blink>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void blink(int d){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 80001d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001d4:	4816      	ldr	r0, [pc, #88]	; (8000230 <blink+0x68>)
 80001d6:	f000 ffa5 	bl	8001124 <HAL_GPIO_TogglePin>
HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 80001da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001de:	4814      	ldr	r0, [pc, #80]	; (8000230 <blink+0x68>)
 80001e0:	f000 ffa0 	bl	8001124 <HAL_GPIO_TogglePin>
HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 80001e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001e8:	4811      	ldr	r0, [pc, #68]	; (8000230 <blink+0x68>)
 80001ea:	f000 ff9b 	bl	8001124 <HAL_GPIO_TogglePin>
HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 80001ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001f2:	480f      	ldr	r0, [pc, #60]	; (8000230 <blink+0x68>)
 80001f4:	f000 ff96 	bl	8001124 <HAL_GPIO_TogglePin>
HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 80001f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001fc:	480c      	ldr	r0, [pc, #48]	; (8000230 <blink+0x68>)
 80001fe:	f000 ff91 	bl	8001124 <HAL_GPIO_TogglePin>
HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
 8000202:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000206:	480a      	ldr	r0, [pc, #40]	; (8000230 <blink+0x68>)
 8000208:	f000 ff8c 	bl	8001124 <HAL_GPIO_TogglePin>
HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_14);
 800020c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000210:	4807      	ldr	r0, [pc, #28]	; (8000230 <blink+0x68>)
 8000212:	f000 ff87 	bl	8001124 <HAL_GPIO_TogglePin>
HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);
 8000216:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800021a:	4805      	ldr	r0, [pc, #20]	; (8000230 <blink+0x68>)
 800021c:	f000 ff82 	bl	8001124 <HAL_GPIO_TogglePin>
HAL_Delay(d);
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4618      	mov	r0, r3
 8000224:	f000 fce2 	bl	8000bec <HAL_Delay>
}
 8000228:	bf00      	nop
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	48001000 	.word	0x48001000

08000234 <main>:
  * @retval int
  *
  *
  */
int main(void)
{
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b08c      	sub	sp, #48	; 0x30
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int count=0;
 800023a:	2300      	movs	r3, #0
 800023c:	62fb      	str	r3, [r7, #44]	; 0x2c
	char mx[]="\n \r count : \n\r";
 800023e:	4b29      	ldr	r3, [pc, #164]	; (80002e4 <main+0xb0>)
 8000240:	f107 0418 	add.w	r4, r7, #24
 8000244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000246:	c407      	stmia	r4!, {r0, r1, r2}
 8000248:	8023      	strh	r3, [r4, #0]
 800024a:	3402      	adds	r4, #2
 800024c:	0c1b      	lsrs	r3, r3, #16
 800024e:	7023      	strb	r3, [r4, #0]
	char r[]="\n\r reset count \n\r";
 8000250:	4b25      	ldr	r3, [pc, #148]	; (80002e8 <main+0xb4>)
 8000252:	1d3c      	adds	r4, r7, #4
 8000254:	461d      	mov	r5, r3
 8000256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800025a:	682b      	ldr	r3, [r5, #0]
 800025c:	8023      	strh	r3, [r4, #0]
	char f[]=" ";
 800025e:	2320      	movs	r3, #32
 8000260:	803b      	strh	r3, [r7, #0]
	int delay=100;
 8000262:	2364      	movs	r3, #100	; 0x64
 8000264:	62bb      	str	r3, [r7, #40]	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f000 fc5b 	bl	8000b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026a:	f000 f841 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026e:	f000 f9d7 	bl	8000620 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000272:	f000 f8a5 	bl	80003c0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000276:	f000 f8e3 	bl	8000440 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800027a:	f000 f94f 	bl	800051c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800027e:	f000 f97d 	bl	800057c <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8000282:	f000 f9ab 	bl	80005dc <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 8000286:	f000 f919 	bl	80004bc <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
blink(delay);
 800028a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800028c:	f7ff ff9c 	bl	80001c8 <blink>
count++;
 8000290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000292:	3301      	adds	r3, #1
 8000294:	62fb      	str	r3, [r7, #44]	; 0x2c
f[0]=count +'0';
 8000296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000298:	b2db      	uxtb	r3, r3
 800029a:	3330      	adds	r3, #48	; 0x30
 800029c:	b2db      	uxtb	r3, r3
 800029e:	703b      	strb	r3, [r7, #0]

HAL_UART_Transmit(&huart1, mx, sizeof(mx), 100);
 80002a0:	f107 0118 	add.w	r1, r7, #24
 80002a4:	2364      	movs	r3, #100	; 0x64
 80002a6:	220f      	movs	r2, #15
 80002a8:	4810      	ldr	r0, [pc, #64]	; (80002ec <main+0xb8>)
 80002aa:	f002 fe76 	bl	8002f9a <HAL_UART_Transmit>
HAL_UART_Transmit(&huart1, f, sizeof(f), 100);
 80002ae:	4639      	mov	r1, r7
 80002b0:	2364      	movs	r3, #100	; 0x64
 80002b2:	2202      	movs	r2, #2
 80002b4:	480d      	ldr	r0, [pc, #52]	; (80002ec <main+0xb8>)
 80002b6:	f002 fe70 	bl	8002f9a <HAL_UART_Transmit>
HAL_Delay(100);
 80002ba:	2064      	movs	r0, #100	; 0x64
 80002bc:	f000 fc96 	bl	8000bec <HAL_Delay>
if(count==10){
 80002c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002c2:	2b0a      	cmp	r3, #10
 80002c4:	d1e1      	bne.n	800028a <main+0x56>
HAL_UART_Transmit(&huart1, r, sizeof(r), 500);
 80002c6:	1d39      	adds	r1, r7, #4
 80002c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002cc:	2212      	movs	r2, #18
 80002ce:	4807      	ldr	r0, [pc, #28]	; (80002ec <main+0xb8>)
 80002d0:	f002 fe63 	bl	8002f9a <HAL_UART_Transmit>
	HAL_Delay(500);
 80002d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002d8:	f000 fc88 	bl	8000bec <HAL_Delay>

	count=0;
 80002dc:	2300      	movs	r3, #0
 80002de:	62fb      	str	r3, [r7, #44]	; 0x2c
blink(delay);
 80002e0:	e7d3      	b.n	800028a <main+0x56>
 80002e2:	bf00      	nop
 80002e4:	080038b8 	.word	0x080038b8
 80002e8:	080038c8 	.word	0x080038c8
 80002ec:	200000d8 	.word	0x200000d8

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b09e      	sub	sp, #120	; 0x78
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002fa:	2228      	movs	r2, #40	; 0x28
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f003 fac6 	bl	8003890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]
 8000310:	60da      	str	r2, [r3, #12]
 8000312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000314:	463b      	mov	r3, r7
 8000316:	223c      	movs	r2, #60	; 0x3c
 8000318:	2100      	movs	r1, #0
 800031a:	4618      	mov	r0, r3
 800031c:	f003 fab8 	bl	8003890 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000320:	2303      	movs	r3, #3
 8000322:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000324:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000328:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032e:	2301      	movs	r3, #1
 8000330:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000332:	2310      	movs	r3, #16
 8000334:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000336:	2302      	movs	r3, #2
 8000338:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800033a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800033e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000340:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000344:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000346:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800034a:	4618      	mov	r0, r3
 800034c:	f001 f908 	bl	8001560 <HAL_RCC_OscConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000356:	f000 f9e1 	bl	800071c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035a:	230f      	movs	r3, #15
 800035c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035e:	2302      	movs	r3, #2
 8000360:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800036a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000370:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000374:	2101      	movs	r1, #1
 8000376:	4618      	mov	r0, r3
 8000378:	f002 f930 	bl	80025dc <HAL_RCC_ClockConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000382:	f000 f9cb 	bl	800071c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000386:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <SystemClock_Config+0xcc>)
 8000388:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800038a:	2300      	movs	r3, #0
 800038c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000392:	2300      	movs	r3, #0
 8000394:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800039a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800039e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a0:	463b      	mov	r3, r7
 80003a2:	4618      	mov	r0, r3
 80003a4:	f002 fb50 	bl	8002a48 <HAL_RCCEx_PeriphCLKConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80003ae:	f000 f9b5 	bl	800071c <Error_Handler>
  }
}
 80003b2:	bf00      	nop
 80003b4:	3778      	adds	r7, #120	; 0x78
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	00020027 	.word	0x00020027

080003c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <MX_I2C1_Init+0x74>)
 80003c6:	4a1c      	ldr	r2, [pc, #112]	; (8000438 <MX_I2C1_Init+0x78>)
 80003c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <MX_I2C1_Init+0x74>)
 80003cc:	4a1b      	ldr	r2, [pc, #108]	; (800043c <MX_I2C1_Init+0x7c>)
 80003ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003d0:	4b18      	ldr	r3, [pc, #96]	; (8000434 <MX_I2C1_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003d6:	4b17      	ldr	r3, [pc, #92]	; (8000434 <MX_I2C1_Init+0x74>)
 80003d8:	2201      	movs	r2, #1
 80003da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003dc:	4b15      	ldr	r3, [pc, #84]	; (8000434 <MX_I2C1_Init+0x74>)
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003e2:	4b14      	ldr	r3, [pc, #80]	; (8000434 <MX_I2C1_Init+0x74>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <MX_I2C1_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ee:	4b11      	ldr	r3, [pc, #68]	; (8000434 <MX_I2C1_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003f4:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <MX_I2C1_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003fa:	480e      	ldr	r0, [pc, #56]	; (8000434 <MX_I2C1_Init+0x74>)
 80003fc:	f000 feac 	bl	8001158 <HAL_I2C_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000406:	f000 f989 	bl	800071c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800040a:	2100      	movs	r1, #0
 800040c:	4809      	ldr	r0, [pc, #36]	; (8000434 <MX_I2C1_Init+0x74>)
 800040e:	f000 ff32 	bl	8001276 <HAL_I2CEx_ConfigAnalogFilter>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000418:	f000 f980 	bl	800071c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800041c:	2100      	movs	r1, #0
 800041e:	4805      	ldr	r0, [pc, #20]	; (8000434 <MX_I2C1_Init+0x74>)
 8000420:	f000 ff74 	bl	800130c <HAL_I2CEx_ConfigDigitalFilter>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800042a:	f000 f977 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000028 	.word	0x20000028
 8000438:	40005400 	.word	0x40005400
 800043c:	2000090e 	.word	0x2000090e

08000440 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000446:	4a1c      	ldr	r2, [pc, #112]	; (80004b8 <MX_SPI1_Init+0x78>)
 8000448:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800044a:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <MX_SPI1_Init+0x74>)
 800044c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000450:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000452:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000458:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <MX_SPI1_Init+0x74>)
 800045a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800045e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000460:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <MX_SPI1_Init+0x74>)
 800046e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000472:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000476:	2208      	movs	r2, #8
 8000478:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <MX_SPI1_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_SPI1_Init+0x74>)
 800048e:	2207      	movs	r2, #7
 8000490:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <MX_SPI1_Init+0x74>)
 800049a:	2208      	movs	r2, #8
 800049c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800049e:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_SPI1_Init+0x74>)
 80004a0:	f002 fc82 	bl	8002da8 <HAL_SPI_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004aa:	f000 f937 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000074 	.word	0x20000074
 80004b8:	40013000 	.word	0x40013000

080004bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004c0:	4b14      	ldr	r3, [pc, #80]	; (8000514 <MX_USART1_UART_Init+0x58>)
 80004c2:	4a15      	ldr	r2, [pc, #84]	; (8000518 <MX_USART1_UART_Init+0x5c>)
 80004c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80004c6:	4b13      	ldr	r3, [pc, #76]	; (8000514 <MX_USART1_UART_Init+0x58>)
 80004c8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <MX_USART1_UART_Init+0x58>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <MX_USART1_UART_Init+0x58>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <MX_USART1_UART_Init+0x58>)
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <MX_USART1_UART_Init+0x58>)
 80004e2:	220c      	movs	r2, #12
 80004e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <MX_USART1_UART_Init+0x58>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <MX_USART1_UART_Init+0x58>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <MX_USART1_UART_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <MX_USART1_UART_Init+0x58>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <MX_USART1_UART_Init+0x58>)
 8000500:	f002 fcfd 	bl	8002efe <HAL_UART_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800050a:	f000 f907 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	200000d8 	.word	0x200000d8
 8000518:	40013800 	.word	0x40013800

0800051c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_USART2_UART_Init+0x58>)
 8000522:	4a15      	ldr	r2, [pc, #84]	; (8000578 <MX_USART2_UART_Init+0x5c>)
 8000524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <MX_USART2_UART_Init+0x58>)
 8000528:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800052c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_USART2_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_USART2_UART_Init+0x58>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <MX_USART2_UART_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_USART2_UART_Init+0x58>)
 8000542:	220c      	movs	r2, #12
 8000544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <MX_USART2_UART_Init+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800054c:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_USART2_UART_Init+0x58>)
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <MX_USART2_UART_Init+0x58>)
 8000554:	2200      	movs	r2, #0
 8000556:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_USART2_UART_Init+0x58>)
 800055a:	2200      	movs	r2, #0
 800055c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800055e:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_USART2_UART_Init+0x58>)
 8000560:	f002 fccd 	bl	8002efe <HAL_UART_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800056a:	f000 f8d7 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	2000015c 	.word	0x2000015c
 8000578:	40004400 	.word	0x40004400

0800057c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <MX_USART3_UART_Init+0x58>)
 8000582:	4a15      	ldr	r2, [pc, #84]	; (80005d8 <MX_USART3_UART_Init+0x5c>)
 8000584:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <MX_USART3_UART_Init+0x58>)
 8000588:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800058c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_USART3_UART_Init+0x58>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_USART3_UART_Init+0x58>)
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_USART3_UART_Init+0x58>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <MX_USART3_UART_Init+0x58>)
 80005a2:	220c      	movs	r2, #12
 80005a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_USART3_UART_Init+0x58>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_USART3_UART_Init+0x58>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <MX_USART3_UART_Init+0x58>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <MX_USART3_UART_Init+0x58>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_USART3_UART_Init+0x58>)
 80005c0:	f002 fc9d 	bl	8002efe <HAL_UART_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80005ca:	f000 f8a7 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200001e0 	.word	0x200001e0
 80005d8:	40004800 	.word	0x40004800

080005dc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <MX_USB_PCD_Init+0x40>)
 80005e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 80005e8:	2208      	movs	r2, #8
 80005ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 80005ee:	2202      	movs	r2, #2
 80005f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 80005f4:	2202      	movs	r2, #2
 80005f6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 8000606:	f000 fecd 	bl	80013a4 <HAL_PCD_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000610:	f000 f884 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000264 	.word	0x20000264
 800061c:	40005c00 	.word	0x40005c00

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000636:	4b37      	ldr	r3, [pc, #220]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a36      	ldr	r2, [pc, #216]	; (8000714 <MX_GPIO_Init+0xf4>)
 800063c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b34      	ldr	r3, [pc, #208]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b31      	ldr	r3, [pc, #196]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a30      	ldr	r2, [pc, #192]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000654:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b2e      	ldr	r3, [pc, #184]	; (8000714 <MX_GPIO_Init+0xf4>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000666:	4b2b      	ldr	r3, [pc, #172]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a2a      	ldr	r2, [pc, #168]	; (8000714 <MX_GPIO_Init+0xf4>)
 800066c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b28      	ldr	r3, [pc, #160]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b25      	ldr	r3, [pc, #148]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	4a24      	ldr	r2, [pc, #144]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000688:	6153      	str	r3, [r2, #20]
 800068a:	4b22      	ldr	r3, [pc, #136]	; (8000714 <MX_GPIO_Init+0xf4>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4a1e      	ldr	r2, [pc, #120]	; (8000714 <MX_GPIO_Init+0xf4>)
 800069c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006a0:	6153      	str	r3, [r2, #20]
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <MX_GPIO_Init+0xf4>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006ae:	2200      	movs	r2, #0
 80006b0:	f64f 7108 	movw	r1, #65288	; 0xff08
 80006b4:	4818      	ldr	r0, [pc, #96]	; (8000718 <MX_GPIO_Init+0xf8>)
 80006b6:	f000 fd1d 	bl	80010f4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80006ba:	2337      	movs	r3, #55	; 0x37
 80006bc:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006be:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4619      	mov	r1, r3
 80006ce:	4812      	ldr	r0, [pc, #72]	; (8000718 <MX_GPIO_Init+0xf8>)
 80006d0:	f000 fb96 	bl	8000e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006d4:	f64f 7308 	movw	r3, #65288	; 0xff08
 80006d8:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	480a      	ldr	r0, [pc, #40]	; (8000718 <MX_GPIO_Init+0xf8>)
 80006ee:	f000 fb87 	bl	8000e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006f2:	2301      	movs	r3, #1
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000708:	f000 fb7a 	bl	8000e00 <HAL_GPIO_Init>

}
 800070c:	bf00      	nop
 800070e:	3728      	adds	r7, #40	; 0x28
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000
 8000718:	48001000 	.word	0x48001000

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	e7fe      	b.n	8000724 <Error_Handler+0x8>
	...

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_MspInit+0x44>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	4a0e      	ldr	r2, [pc, #56]	; (800076c <HAL_MspInit+0x44>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6193      	str	r3, [r2, #24]
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_MspInit+0x44>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_MspInit+0x44>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <HAL_MspInit+0x44>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_MspInit+0x44>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800075e:	2007      	movs	r0, #7
 8000760:	f000 fb1a 	bl	8000d98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40021000 	.word	0x40021000

08000770 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a17      	ldr	r2, [pc, #92]	; (80007ec <HAL_I2C_MspInit+0x7c>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d127      	bne.n	80007e2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_I2C_MspInit+0x80>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	4a16      	ldr	r2, [pc, #88]	; (80007f0 <HAL_I2C_MspInit+0x80>)
 8000798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800079c:	6153      	str	r3, [r2, #20]
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <HAL_I2C_MspInit+0x80>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80007aa:	23c0      	movs	r3, #192	; 0xc0
 80007ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ae:	2312      	movs	r3, #18
 80007b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b6:	2303      	movs	r3, #3
 80007b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007ba:	2304      	movs	r3, #4
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	480b      	ldr	r0, [pc, #44]	; (80007f4 <HAL_I2C_MspInit+0x84>)
 80007c6:	f000 fb1b 	bl	8000e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_I2C_MspInit+0x80>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <HAL_I2C_MspInit+0x80>)
 80007d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007d4:	61d3      	str	r3, [r2, #28]
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_I2C_MspInit+0x80>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007e2:	bf00      	nop
 80007e4:	3728      	adds	r7, #40	; 0x28
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40005400 	.word	0x40005400
 80007f0:	40021000 	.word	0x40021000
 80007f4:	48000400 	.word	0x48000400

080007f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a17      	ldr	r2, [pc, #92]	; (8000874 <HAL_SPI_MspInit+0x7c>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d128      	bne.n	800086c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <HAL_SPI_MspInit+0x80>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <HAL_SPI_MspInit+0x80>)
 8000820:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000824:	6193      	str	r3, [r2, #24]
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <HAL_SPI_MspInit+0x80>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <HAL_SPI_MspInit+0x80>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a10      	ldr	r2, [pc, #64]	; (8000878 <HAL_SPI_MspInit+0x80>)
 8000838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083c:	6153      	str	r3, [r2, #20]
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <HAL_SPI_MspInit+0x80>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800084a:	23e0      	movs	r3, #224	; 0xe0
 800084c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000856:	2303      	movs	r3, #3
 8000858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800085a:	2305      	movs	r3, #5
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000868:	f000 faca 	bl	8000e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40013000 	.word	0x40013000
 8000878:	40021000 	.word	0x40021000

0800087c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08e      	sub	sp, #56	; 0x38
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a46      	ldr	r2, [pc, #280]	; (80009b4 <HAL_UART_MspInit+0x138>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d128      	bne.n	80008f0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800089e:	4b46      	ldr	r3, [pc, #280]	; (80009b8 <HAL_UART_MspInit+0x13c>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	4a45      	ldr	r2, [pc, #276]	; (80009b8 <HAL_UART_MspInit+0x13c>)
 80008a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a8:	6193      	str	r3, [r2, #24]
 80008aa:	4b43      	ldr	r3, [pc, #268]	; (80009b8 <HAL_UART_MspInit+0x13c>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b2:	623b      	str	r3, [r7, #32]
 80008b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4b40      	ldr	r3, [pc, #256]	; (80009b8 <HAL_UART_MspInit+0x13c>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	4a3f      	ldr	r2, [pc, #252]	; (80009b8 <HAL_UART_MspInit+0x13c>)
 80008bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008c0:	6153      	str	r3, [r2, #20]
 80008c2:	4b3d      	ldr	r3, [pc, #244]	; (80009b8 <HAL_UART_MspInit+0x13c>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008ca:	61fb      	str	r3, [r7, #28]
 80008cc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008ce:	2330      	movs	r3, #48	; 0x30
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008de:	2307      	movs	r3, #7
 80008e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e6:	4619      	mov	r1, r3
 80008e8:	4834      	ldr	r0, [pc, #208]	; (80009bc <HAL_UART_MspInit+0x140>)
 80008ea:	f000 fa89 	bl	8000e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80008ee:	e05c      	b.n	80009aa <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a32      	ldr	r2, [pc, #200]	; (80009c0 <HAL_UART_MspInit+0x144>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d129      	bne.n	800094e <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008fa:	4b2f      	ldr	r3, [pc, #188]	; (80009b8 <HAL_UART_MspInit+0x13c>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	4a2e      	ldr	r2, [pc, #184]	; (80009b8 <HAL_UART_MspInit+0x13c>)
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	61d3      	str	r3, [r2, #28]
 8000906:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <HAL_UART_MspInit+0x13c>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090e:	61bb      	str	r3, [r7, #24]
 8000910:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <HAL_UART_MspInit+0x13c>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	4a28      	ldr	r2, [pc, #160]	; (80009b8 <HAL_UART_MspInit+0x13c>)
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	6153      	str	r3, [r2, #20]
 800091e:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <HAL_UART_MspInit+0x13c>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800092a:	230c      	movs	r3, #12
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800093a:	2307      	movs	r3, #7
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f000 fa5a 	bl	8000e00 <HAL_GPIO_Init>
}
 800094c:	e02d      	b.n	80009aa <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a1c      	ldr	r2, [pc, #112]	; (80009c4 <HAL_UART_MspInit+0x148>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d128      	bne.n	80009aa <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <HAL_UART_MspInit+0x13c>)
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <HAL_UART_MspInit+0x13c>)
 800095e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000962:	61d3      	str	r3, [r2, #28]
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <HAL_UART_MspInit+0x13c>)
 8000966:	69db      	ldr	r3, [r3, #28]
 8000968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_UART_MspInit+0x13c>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <HAL_UART_MspInit+0x13c>)
 8000976:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800097a:	6153      	str	r3, [r2, #20]
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_UART_MspInit+0x13c>)
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000988:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800099a:	2307      	movs	r3, #7
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	4619      	mov	r1, r3
 80009a4:	4808      	ldr	r0, [pc, #32]	; (80009c8 <HAL_UART_MspInit+0x14c>)
 80009a6:	f000 fa2b 	bl	8000e00 <HAL_GPIO_Init>
}
 80009aa:	bf00      	nop
 80009ac:	3738      	adds	r7, #56	; 0x38
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40013800 	.word	0x40013800
 80009b8:	40021000 	.word	0x40021000
 80009bc:	48000800 	.word	0x48000800
 80009c0:	40004400 	.word	0x40004400
 80009c4:	40004800 	.word	0x40004800
 80009c8:	48000400 	.word	0x48000400

080009cc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <HAL_PCD_MspInit+0x80>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d129      	bne.n	8000a42 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_PCD_MspInit+0x84>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <HAL_PCD_MspInit+0x84>)
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	6153      	str	r3, [r2, #20]
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_PCD_MspInit+0x84>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000a06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000a18:	230e      	movs	r3, #14
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a26:	f000 f9eb 	bl	8000e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_PCD_MspInit+0x84>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_PCD_MspInit+0x84>)
 8000a30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a34:	61d3      	str	r3, [r2, #28]
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_PCD_MspInit+0x84>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40005c00 	.word	0x40005c00
 8000a50:	40021000 	.word	0x40021000

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 f884 	bl	8000bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aae:	490e      	ldr	r1, [pc, #56]	; (8000ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab0:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <LoopForever+0xe>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac4:	4c0b      	ldr	r4, [pc, #44]	; (8000af4 <LoopForever+0x16>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ad2:	f000 f813 	bl	8000afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f002 feb7 	bl	8003848 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ada:	f7ff fbab 	bl	8000234 <main>

08000ade <LoopForever>:

LoopForever:
    b LoopForever
 8000ade:	e7fe      	b.n	8000ade <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ae0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aec:	0800391c 	.word	0x0800391c
  ldr r2, =_sbss
 8000af0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000af4:	20000554 	.word	0x20000554

08000af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC1_2_IRQHandler>
	...

08000afc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <SystemInit+0x20>)
 8000b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <SystemInit+0x20>)
 8000b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_Init+0x28>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <HAL_Init+0x28>)
 8000b2a:	f043 0310 	orr.w	r3, r3, #16
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 f931 	bl	8000d98 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 f808 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b3c:	f7ff fdf4 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40022000 	.word	0x40022000

08000b4c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_InitTick+0x54>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_InitTick+0x58>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f93b 	bl	8000de6 <HAL_SYSTICK_Config>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00e      	b.n	8000b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d80a      	bhi.n	8000b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b88:	f000 f911 	bl	8000dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8c:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <HAL_InitTick+0x5c>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e000      	b.n	8000b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000004 	.word	0x20000004

08000bac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000550 	.word	0x20000550

08000bd4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000550 	.word	0x20000550

08000bec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff ffee 	bl	8000bd4 <HAL_GetTick>
 8000bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_Delay+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c12:	bf00      	nop
 8000c14:	f7ff ffde 	bl	8000bd4 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	db0a      	blt.n	8000cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	490c      	ldr	r1, [pc, #48]	; (8000ce4 <__NVIC_SetPriority+0x4c>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	440b      	add	r3, r1
 8000cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc0:	e00a      	b.n	8000cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4908      	ldr	r1, [pc, #32]	; (8000ce8 <__NVIC_SetPriority+0x50>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	3b04      	subs	r3, #4
 8000cd0:	0112      	lsls	r2, r2, #4
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	761a      	strb	r2, [r3, #24]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000e100 	.word	0xe000e100
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	; 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f1c3 0307 	rsb	r3, r3, #7
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	bf28      	it	cs
 8000d0a:	2304      	movcs	r3, #4
 8000d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3304      	adds	r3, #4
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	d902      	bls.n	8000d1c <NVIC_EncodePriority+0x30>
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3b03      	subs	r3, #3
 8000d1a:	e000      	b.n	8000d1e <NVIC_EncodePriority+0x32>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43da      	mvns	r2, r3
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	401a      	ands	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3e:	43d9      	mvns	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	4313      	orrs	r3, r2
         );
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3724      	adds	r7, #36	; 0x24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d64:	d301      	bcc.n	8000d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00f      	b.n	8000d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <SysTick_Config+0x40>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d72:	210f      	movs	r1, #15
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d78:	f7ff ff8e 	bl	8000c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <SysTick_Config+0x40>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SysTick_Config+0x40>)
 8000d84:	2207      	movs	r2, #7
 8000d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	e000e010 	.word	0xe000e010

08000d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff47 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc0:	f7ff ff5c 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	6978      	ldr	r0, [r7, #20]
 8000dcc:	f7ff ff8e 	bl	8000cec <NVIC_EncodePriority>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff5d 	bl	8000c98 <__NVIC_SetPriority>
}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ffb0 	bl	8000d54 <SysTick_Config>
 8000df4:	4603      	mov	r3, r0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b087      	sub	sp, #28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e0e:	e154      	b.n	80010ba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	2101      	movs	r1, #1
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f000 8146 	beq.w	80010b4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d005      	beq.n	8000e40 <HAL_GPIO_Init+0x40>
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d130      	bne.n	8000ea2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e76:	2201      	movs	r2, #1
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	091b      	lsrs	r3, r3, #4
 8000e8c:	f003 0201 	and.w	r2, r3, #1
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	d017      	beq.n	8000ede <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	2203      	movs	r2, #3
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d123      	bne.n	8000f32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	08da      	lsrs	r2, r3, #3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3208      	adds	r2, #8
 8000ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	220f      	movs	r2, #15
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	691a      	ldr	r2, [r3, #16]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f003 0307 	and.w	r3, r3, #7
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	08da      	lsrs	r2, r3, #3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3208      	adds	r2, #8
 8000f2c:	6939      	ldr	r1, [r7, #16]
 8000f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0203 	and.w	r2, r3, #3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 80a0 	beq.w	80010b4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f74:	4b58      	ldr	r3, [pc, #352]	; (80010d8 <HAL_GPIO_Init+0x2d8>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a57      	ldr	r2, [pc, #348]	; (80010d8 <HAL_GPIO_Init+0x2d8>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b55      	ldr	r3, [pc, #340]	; (80010d8 <HAL_GPIO_Init+0x2d8>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f8c:	4a53      	ldr	r2, [pc, #332]	; (80010dc <HAL_GPIO_Init+0x2dc>)
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	3302      	adds	r3, #2
 8000f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	220f      	movs	r2, #15
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fb6:	d019      	beq.n	8000fec <HAL_GPIO_Init+0x1ec>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a49      	ldr	r2, [pc, #292]	; (80010e0 <HAL_GPIO_Init+0x2e0>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d013      	beq.n	8000fe8 <HAL_GPIO_Init+0x1e8>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a48      	ldr	r2, [pc, #288]	; (80010e4 <HAL_GPIO_Init+0x2e4>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d00d      	beq.n	8000fe4 <HAL_GPIO_Init+0x1e4>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a47      	ldr	r2, [pc, #284]	; (80010e8 <HAL_GPIO_Init+0x2e8>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d007      	beq.n	8000fe0 <HAL_GPIO_Init+0x1e0>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a46      	ldr	r2, [pc, #280]	; (80010ec <HAL_GPIO_Init+0x2ec>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d101      	bne.n	8000fdc <HAL_GPIO_Init+0x1dc>
 8000fd8:	2304      	movs	r3, #4
 8000fda:	e008      	b.n	8000fee <HAL_GPIO_Init+0x1ee>
 8000fdc:	2305      	movs	r3, #5
 8000fde:	e006      	b.n	8000fee <HAL_GPIO_Init+0x1ee>
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e004      	b.n	8000fee <HAL_GPIO_Init+0x1ee>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e002      	b.n	8000fee <HAL_GPIO_Init+0x1ee>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <HAL_GPIO_Init+0x1ee>
 8000fec:	2300      	movs	r3, #0
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	f002 0203 	and.w	r2, r2, #3
 8000ff4:	0092      	lsls	r2, r2, #2
 8000ff6:	4093      	lsls	r3, r2
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ffe:	4937      	ldr	r1, [pc, #220]	; (80010dc <HAL_GPIO_Init+0x2dc>)
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	3302      	adds	r3, #2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800100c:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <HAL_GPIO_Init+0x2f0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001030:	4a2f      	ldr	r2, [pc, #188]	; (80010f0 <HAL_GPIO_Init+0x2f0>)
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001036:	4b2e      	ldr	r3, [pc, #184]	; (80010f0 <HAL_GPIO_Init+0x2f0>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800105a:	4a25      	ldr	r2, [pc, #148]	; (80010f0 <HAL_GPIO_Init+0x2f0>)
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001060:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <HAL_GPIO_Init+0x2f0>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001084:	4a1a      	ldr	r2, [pc, #104]	; (80010f0 <HAL_GPIO_Init+0x2f0>)
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_GPIO_Init+0x2f0>)
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010ae:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <HAL_GPIO_Init+0x2f0>)
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	3301      	adds	r3, #1
 80010b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	fa22 f303 	lsr.w	r3, r2, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f47f aea3 	bne.w	8000e10 <HAL_GPIO_Init+0x10>
  }
}
 80010ca:	bf00      	nop
 80010cc:	bf00      	nop
 80010ce:	371c      	adds	r7, #28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010000 	.word	0x40010000
 80010e0:	48000400 	.word	0x48000400
 80010e4:	48000800 	.word	0x48000800
 80010e8:	48000c00 	.word	0x48000c00
 80010ec:	48001000 	.word	0x48001000
 80010f0:	40010400 	.word	0x40010400

080010f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
 8001100:	4613      	mov	r3, r2
 8001102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001104:	787b      	ldrb	r3, [r7, #1]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800110a:	887a      	ldrh	r2, [r7, #2]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001110:	e002      	b.n	8001118 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4013      	ands	r3, r2
 800113c:	041a      	lsls	r2, r3, #16
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	43d9      	mvns	r1, r3
 8001142:	887b      	ldrh	r3, [r7, #2]
 8001144:	400b      	ands	r3, r1
 8001146:	431a      	orrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	619a      	str	r2, [r3, #24]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e081      	b.n	800126e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d106      	bne.n	8001184 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff faf6 	bl	8000770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2224      	movs	r2, #36	; 0x24
 8001188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0201 	bic.w	r2, r2, #1
 800119a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d107      	bne.n	80011d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	e006      	b.n	80011e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d104      	bne.n	80011f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001204:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001214:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	691a      	ldr	r2, [r3, #16]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	430a      	orrs	r2, r1
 800122e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69d9      	ldr	r1, [r3, #28]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a1a      	ldr	r2, [r3, #32]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0201 	orr.w	r2, r2, #1
 800124e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2220      	movs	r2, #32
 800125a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b20      	cmp	r3, #32
 800128a:	d138      	bne.n	80012fe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001292:	2b01      	cmp	r3, #1
 8001294:	d101      	bne.n	800129a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001296:	2302      	movs	r3, #2
 8001298:	e032      	b.n	8001300 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2224      	movs	r2, #36	; 0x24
 80012a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0201 	bic.w	r2, r2, #1
 80012b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012c8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6819      	ldr	r1, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f042 0201 	orr.w	r2, r2, #1
 80012e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2220      	movs	r2, #32
 80012ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012fe:	2302      	movs	r3, #2
  }
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b20      	cmp	r3, #32
 8001320:	d139      	bne.n	8001396 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001328:	2b01      	cmp	r3, #1
 800132a:	d101      	bne.n	8001330 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800132c:	2302      	movs	r3, #2
 800132e:	e033      	b.n	8001398 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2224      	movs	r2, #36	; 0x24
 800133c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0201 	bic.w	r2, r2, #1
 800134e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800135e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	4313      	orrs	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 0201 	orr.w	r2, r2, #1
 8001380:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2220      	movs	r2, #32
 8001386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	e000      	b.n	8001398 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001396:	2302      	movs	r3, #2
  }
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a6:	b08b      	sub	sp, #44	; 0x2c
 80013a8:	af06      	add	r7, sp, #24
 80013aa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e0d0      	b.n	8001558 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d106      	bne.n	80013d0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fafe 	bl	80009cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2203      	movs	r2, #3
 80013d4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 f9f6 	bl	80037ce <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	e04c      	b.n	8001482 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	440b      	add	r3, r1
 80013f8:	3301      	adds	r3, #1
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	b298      	uxth	r0, r3
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	440b      	add	r3, r1
 8001424:	3336      	adds	r3, #54	; 0x36
 8001426:	4602      	mov	r2, r0
 8001428:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	440b      	add	r3, r1
 800143a:	3303      	adds	r3, #3
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	440b      	add	r3, r1
 800144e:	3338      	adds	r3, #56	; 0x38
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	440b      	add	r3, r1
 8001462:	333c      	adds	r3, #60	; 0x3c
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	440b      	add	r3, r1
 8001476:	3340      	adds	r3, #64	; 0x40
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	3301      	adds	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	429a      	cmp	r2, r3
 800148a:	d3ad      	bcc.n	80013e8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	e044      	b.n	800151c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001492:	7bfa      	ldrb	r2, [r7, #15]
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	440b      	add	r3, r1
 80014a0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	440b      	add	r3, r1
 80014b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014ba:	7bfa      	ldrb	r2, [r7, #15]
 80014bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014be:	7bfa      	ldrb	r2, [r7, #15]
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	440b      	add	r3, r1
 80014cc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	440b      	add	r3, r1
 80014e2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014ea:	7bfa      	ldrb	r2, [r7, #15]
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	440b      	add	r3, r1
 80014f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001500:	7bfa      	ldrb	r2, [r7, #15]
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	440b      	add	r3, r1
 800150e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	3301      	adds	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	429a      	cmp	r2, r3
 8001524:	d3b5      	bcc.n	8001492 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	687e      	ldr	r6, [r7, #4]
 800152e:	466d      	mov	r5, sp
 8001530:	f106 0410 	add.w	r4, r6, #16
 8001534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001538:	6823      	ldr	r3, [r4, #0]
 800153a:	602b      	str	r3, [r5, #0]
 800153c:	1d33      	adds	r3, r6, #4
 800153e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001540:	6838      	ldr	r0, [r7, #0]
 8001542:	f002 f95f 	bl	8003804 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001566:	af00      	add	r7, sp, #0
 8001568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001570:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001576:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	f001 b823 	b.w	80025cc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 817d 	beq.w	8001896 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800159c:	4bbc      	ldr	r3, [pc, #752]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 030c 	and.w	r3, r3, #12
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d00c      	beq.n	80015c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015a8:	4bb9      	ldr	r3, [pc, #740]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d15c      	bne.n	800166e <HAL_RCC_OscConfig+0x10e>
 80015b4:	4bb6      	ldr	r3, [pc, #728]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c0:	d155      	bne.n	800166e <HAL_RCC_OscConfig+0x10e>
 80015c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80015ce:	fa93 f3a3 	rbit	r3, r3
 80015d2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015da:	fab3 f383 	clz	r3, r3
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	095b      	lsrs	r3, r3, #5
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d102      	bne.n	80015f4 <HAL_RCC_OscConfig+0x94>
 80015ee:	4ba8      	ldr	r3, [pc, #672]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	e015      	b.n	8001620 <HAL_RCC_OscConfig+0xc0>
 80015f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001600:	fa93 f3a3 	rbit	r3, r3
 8001604:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001608:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800160c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001610:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001614:	fa93 f3a3 	rbit	r3, r3
 8001618:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800161c:	4b9c      	ldr	r3, [pc, #624]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001624:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001628:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800162c:	fa92 f2a2 	rbit	r2, r2
 8001630:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001634:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001638:	fab2 f282 	clz	r2, r2
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	f042 0220 	orr.w	r2, r2, #32
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	f002 021f 	and.w	r2, r2, #31
 8001648:	2101      	movs	r1, #1
 800164a:	fa01 f202 	lsl.w	r2, r1, r2
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 811f 	beq.w	8001894 <HAL_RCC_OscConfig+0x334>
 8001656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f040 8116 	bne.w	8001894 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	f000 bfaf 	b.w	80025cc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001672:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800167e:	d106      	bne.n	800168e <HAL_RCC_OscConfig+0x12e>
 8001680:	4b83      	ldr	r3, [pc, #524]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a82      	ldr	r2, [pc, #520]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 8001686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	e036      	b.n	80016fc <HAL_RCC_OscConfig+0x19c>
 800168e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001692:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x158>
 800169e:	4b7c      	ldr	r3, [pc, #496]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a7b      	ldr	r2, [pc, #492]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 80016a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	4b79      	ldr	r3, [pc, #484]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a78      	ldr	r2, [pc, #480]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 80016b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	e021      	b.n	80016fc <HAL_RCC_OscConfig+0x19c>
 80016b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x184>
 80016ca:	4b71      	ldr	r3, [pc, #452]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a70      	ldr	r2, [pc, #448]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 80016d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b6e      	ldr	r3, [pc, #440]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a6d      	ldr	r2, [pc, #436]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e00b      	b.n	80016fc <HAL_RCC_OscConfig+0x19c>
 80016e4:	4b6a      	ldr	r3, [pc, #424]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a69      	ldr	r2, [pc, #420]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 80016ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	4b67      	ldr	r3, [pc, #412]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a66      	ldr	r2, [pc, #408]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 80016f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016fa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016fc:	4b64      	ldr	r3, [pc, #400]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	f023 020f 	bic.w	r2, r3, #15
 8001704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001708:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	495f      	ldr	r1, [pc, #380]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 8001712:	4313      	orrs	r3, r2
 8001714:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d059      	beq.n	80017da <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7ff fa55 	bl	8000bd4 <HAL_GetTick>
 800172a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172e:	e00a      	b.n	8001746 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001730:	f7ff fa50 	bl	8000bd4 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b64      	cmp	r3, #100	; 0x64
 800173e:	d902      	bls.n	8001746 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	f000 bf43 	b.w	80025cc <HAL_RCC_OscConfig+0x106c>
 8001746:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800174a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001752:	fa93 f3a3 	rbit	r3, r3
 8001756:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800175a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	fab3 f383 	clz	r3, r3
 8001762:	b2db      	uxtb	r3, r3
 8001764:	095b      	lsrs	r3, r3, #5
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b01      	cmp	r3, #1
 8001770:	d102      	bne.n	8001778 <HAL_RCC_OscConfig+0x218>
 8001772:	4b47      	ldr	r3, [pc, #284]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	e015      	b.n	80017a4 <HAL_RCC_OscConfig+0x244>
 8001778:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800177c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001784:	fa93 f3a3 	rbit	r3, r3
 8001788:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800178c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001790:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001794:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001798:	fa93 f3a3 	rbit	r3, r3
 800179c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80017a0:	4b3b      	ldr	r3, [pc, #236]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017a8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80017ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80017b0:	fa92 f2a2 	rbit	r2, r2
 80017b4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80017b8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80017bc:	fab2 f282 	clz	r2, r2
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	f042 0220 	orr.w	r2, r2, #32
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	f002 021f 	and.w	r2, r2, #31
 80017cc:	2101      	movs	r1, #1
 80017ce:	fa01 f202 	lsl.w	r2, r1, r2
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0ab      	beq.n	8001730 <HAL_RCC_OscConfig+0x1d0>
 80017d8:	e05d      	b.n	8001896 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017da:	f7ff f9fb 	bl	8000bd4 <HAL_GetTick>
 80017de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e4:	f7ff f9f6 	bl	8000bd4 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b64      	cmp	r3, #100	; 0x64
 80017f2:	d902      	bls.n	80017fa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	f000 bee9 	b.w	80025cc <HAL_RCC_OscConfig+0x106c>
 80017fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017fe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001802:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001806:	fa93 f3a3 	rbit	r3, r3
 800180a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800180e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	095b      	lsrs	r3, r3, #5
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b01      	cmp	r3, #1
 8001824:	d102      	bne.n	800182c <HAL_RCC_OscConfig+0x2cc>
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	e015      	b.n	8001858 <HAL_RCC_OscConfig+0x2f8>
 800182c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001830:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001838:	fa93 f3a3 	rbit	r3, r3
 800183c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001844:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001848:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800184c:	fa93 f3a3 	rbit	r3, r3
 8001850:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <HAL_RCC_OscConfig+0x330>)
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800185c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001860:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001864:	fa92 f2a2 	rbit	r2, r2
 8001868:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800186c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001870:	fab2 f282 	clz	r2, r2
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	f042 0220 	orr.w	r2, r2, #32
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	f002 021f 	and.w	r2, r2, #31
 8001880:	2101      	movs	r1, #1
 8001882:	fa01 f202 	lsl.w	r2, r1, r2
 8001886:	4013      	ands	r3, r2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1ab      	bne.n	80017e4 <HAL_RCC_OscConfig+0x284>
 800188c:	e003      	b.n	8001896 <HAL_RCC_OscConfig+0x336>
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 817d 	beq.w	8001ba6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018ac:	4ba6      	ldr	r3, [pc, #664]	; (8001b48 <HAL_RCC_OscConfig+0x5e8>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00b      	beq.n	80018d0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018b8:	4ba3      	ldr	r3, [pc, #652]	; (8001b48 <HAL_RCC_OscConfig+0x5e8>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d172      	bne.n	80019aa <HAL_RCC_OscConfig+0x44a>
 80018c4:	4ba0      	ldr	r3, [pc, #640]	; (8001b48 <HAL_RCC_OscConfig+0x5e8>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d16c      	bne.n	80019aa <HAL_RCC_OscConfig+0x44a>
 80018d0:	2302      	movs	r3, #2
 80018d2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80018da:	fa93 f3a3 	rbit	r3, r3
 80018de:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80018e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e6:	fab3 f383 	clz	r3, r3
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	095b      	lsrs	r3, r3, #5
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d102      	bne.n	8001900 <HAL_RCC_OscConfig+0x3a0>
 80018fa:	4b93      	ldr	r3, [pc, #588]	; (8001b48 <HAL_RCC_OscConfig+0x5e8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	e013      	b.n	8001928 <HAL_RCC_OscConfig+0x3c8>
 8001900:	2302      	movs	r3, #2
 8001902:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001912:	2302      	movs	r3, #2
 8001914:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001918:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001924:	4b88      	ldr	r3, [pc, #544]	; (8001b48 <HAL_RCC_OscConfig+0x5e8>)
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	2202      	movs	r2, #2
 800192a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800192e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001932:	fa92 f2a2 	rbit	r2, r2
 8001936:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800193a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800193e:	fab2 f282 	clz	r2, r2
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	f042 0220 	orr.w	r2, r2, #32
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	f002 021f 	and.w	r2, r2, #31
 800194e:	2101      	movs	r1, #1
 8001950:	fa01 f202 	lsl.w	r2, r1, r2
 8001954:	4013      	ands	r3, r2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00a      	beq.n	8001970 <HAL_RCC_OscConfig+0x410>
 800195a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d002      	beq.n	8001970 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	f000 be2e 	b.w	80025cc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001970:	4b75      	ldr	r3, [pc, #468]	; (8001b48 <HAL_RCC_OscConfig+0x5e8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	21f8      	movs	r1, #248	; 0xf8
 8001986:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800198e:	fa91 f1a1 	rbit	r1, r1
 8001992:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001996:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800199a:	fab1 f181 	clz	r1, r1
 800199e:	b2c9      	uxtb	r1, r1
 80019a0:	408b      	lsls	r3, r1
 80019a2:	4969      	ldr	r1, [pc, #420]	; (8001b48 <HAL_RCC_OscConfig+0x5e8>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a8:	e0fd      	b.n	8001ba6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8088 	beq.w	8001acc <HAL_RCC_OscConfig+0x56c>
 80019bc:	2301      	movs	r3, #1
 80019be:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80019c6:	fa93 f3a3 	rbit	r3, r3
 80019ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80019ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d2:	fab3 f383 	clz	r3, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	461a      	mov	r2, r3
 80019e4:	2301      	movs	r3, #1
 80019e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff f8f4 	bl	8000bd4 <HAL_GetTick>
 80019ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f2:	f7ff f8ef 	bl	8000bd4 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d902      	bls.n	8001a08 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	f000 bde2 	b.w	80025cc <HAL_RCC_OscConfig+0x106c>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001a1a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	095b      	lsrs	r3, r3, #5
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d102      	bne.n	8001a38 <HAL_RCC_OscConfig+0x4d8>
 8001a32:	4b45      	ldr	r3, [pc, #276]	; (8001b48 <HAL_RCC_OscConfig+0x5e8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	e013      	b.n	8001a60 <HAL_RCC_OscConfig+0x500>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001a50:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a54:	fa93 f3a3 	rbit	r3, r3
 8001a58:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001a5c:	4b3a      	ldr	r3, [pc, #232]	; (8001b48 <HAL_RCC_OscConfig+0x5e8>)
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	2202      	movs	r2, #2
 8001a62:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001a66:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001a6a:	fa92 f2a2 	rbit	r2, r2
 8001a6e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001a72:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001a76:	fab2 f282 	clz	r2, r2
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	f042 0220 	orr.w	r2, r2, #32
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	f002 021f 	and.w	r2, r2, #31
 8001a86:	2101      	movs	r1, #1
 8001a88:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0af      	beq.n	80019f2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a92:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <HAL_RCC_OscConfig+0x5e8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	21f8      	movs	r1, #248	; 0xf8
 8001aa8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ab0:	fa91 f1a1 	rbit	r1, r1
 8001ab4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001ab8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001abc:	fab1 f181 	clz	r1, r1
 8001ac0:	b2c9      	uxtb	r1, r1
 8001ac2:	408b      	lsls	r3, r1
 8001ac4:	4920      	ldr	r1, [pc, #128]	; (8001b48 <HAL_RCC_OscConfig+0x5e8>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]
 8001aca:	e06c      	b.n	8001ba6 <HAL_RCC_OscConfig+0x646>
 8001acc:	2301      	movs	r3, #1
 8001ace:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ad6:	fa93 f3a3 	rbit	r3, r3
 8001ada:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001ade:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae2:	fab3 f383 	clz	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	461a      	mov	r2, r3
 8001af4:	2300      	movs	r3, #0
 8001af6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff f86c 	bl	8000bd4 <HAL_GetTick>
 8001afc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b00:	e00a      	b.n	8001b18 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b02:	f7ff f867 	bl	8000bd4 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d902      	bls.n	8001b18 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	f000 bd5a 	b.w	80025cc <HAL_RCC_OscConfig+0x106c>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	095b      	lsrs	r3, r3, #5
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d104      	bne.n	8001b4c <HAL_RCC_OscConfig+0x5ec>
 8001b42:	4b01      	ldr	r3, [pc, #4]	; (8001b48 <HAL_RCC_OscConfig+0x5e8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	e015      	b.n	8001b74 <HAL_RCC_OscConfig+0x614>
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b56:	fa93 f3a3 	rbit	r3, r3
 8001b5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001b5e:	2302      	movs	r3, #2
 8001b60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001b64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b68:	fa93 f3a3 	rbit	r3, r3
 8001b6c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001b70:	4bc8      	ldr	r3, [pc, #800]	; (8001e94 <HAL_RCC_OscConfig+0x934>)
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	2202      	movs	r2, #2
 8001b76:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001b7a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001b7e:	fa92 f2a2 	rbit	r2, r2
 8001b82:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001b86:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001b8a:	fab2 f282 	clz	r2, r2
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	f042 0220 	orr.w	r2, r2, #32
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	f002 021f 	and.w	r2, r2, #31
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1ad      	bne.n	8001b02 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001baa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8110 	beq.w	8001ddc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d079      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x760>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be2:	fab3 f383 	clz	r3, r3
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	461a      	mov	r2, r3
 8001bea:	4bab      	ldr	r3, [pc, #684]	; (8001e98 <HAL_RCC_OscConfig+0x938>)
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf6:	f7fe ffed 	bl	8000bd4 <HAL_GetTick>
 8001bfa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c00:	f7fe ffe8 	bl	8000bd4 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d902      	bls.n	8001c16 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	f000 bcdb 	b.w	80025cc <HAL_RCC_OscConfig+0x106c>
 8001c16:	2302      	movs	r3, #2
 8001c18:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c20:	fa93 f3a3 	rbit	r3, r3
 8001c24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c30:	2202      	movs	r2, #2
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c38:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	fa93 f2a3 	rbit	r2, r3
 8001c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c54:	2202      	movs	r2, #2
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	fa93 f2a3 	rbit	r2, r3
 8001c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c6e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c70:	4b88      	ldr	r3, [pc, #544]	; (8001e94 <HAL_RCC_OscConfig+0x934>)
 8001c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c7c:	2102      	movs	r1, #2
 8001c7e:	6019      	str	r1, [r3, #0]
 8001c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	fa93 f1a3 	rbit	r1, r3
 8001c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c96:	6019      	str	r1, [r3, #0]
  return result;
 8001c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0a0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x6a0>
 8001cbe:	e08d      	b.n	8001ddc <HAL_RCC_OscConfig+0x87c>
 8001cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	fa93 f2a3 	rbit	r2, r3
 8001cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cde:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ce2:	601a      	str	r2, [r3, #0]
  return result;
 8001ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001cec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b68      	ldr	r3, [pc, #416]	; (8001e98 <HAL_RCC_OscConfig+0x938>)
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2300      	movs	r3, #0
 8001d00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d02:	f7fe ff67 	bl	8000bd4 <HAL_GetTick>
 8001d06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0a:	e00a      	b.n	8001d22 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7fe ff62 	bl	8000bd4 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d902      	bls.n	8001d22 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	f000 bc55 	b.w	80025cc <HAL_RCC_OscConfig+0x106c>
 8001d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d26:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d32:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	fa93 f2a3 	rbit	r2, r3
 8001d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d40:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d4e:	2202      	movs	r2, #2
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d56:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	fa93 f2a3 	rbit	r2, r3
 8001d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d72:	2202      	movs	r2, #2
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	fa93 f2a3 	rbit	r2, r3
 8001d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d88:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001d8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8e:	4b41      	ldr	r3, [pc, #260]	; (8001e94 <HAL_RCC_OscConfig+0x934>)
 8001d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d96:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001d9a:	2102      	movs	r1, #2
 8001d9c:	6019      	str	r1, [r3, #0]
 8001d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	fa93 f1a3 	rbit	r1, r3
 8001dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001db4:	6019      	str	r1, [r3, #0]
  return result;
 8001db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	fab3 f383 	clz	r3, r3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d197      	bne.n	8001d0c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 81a1 	beq.w	8002134 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df8:	4b26      	ldr	r3, [pc, #152]	; (8001e94 <HAL_RCC_OscConfig+0x934>)
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d116      	bne.n	8001e32 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e04:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <HAL_RCC_OscConfig+0x934>)
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	4a22      	ldr	r2, [pc, #136]	; (8001e94 <HAL_RCC_OscConfig+0x934>)
 8001e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	61d3      	str	r3, [r2, #28]
 8001e10:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <HAL_RCC_OscConfig+0x934>)
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e26:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001e2a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <HAL_RCC_OscConfig+0x93c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d11a      	bne.n	8001e74 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3e:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <HAL_RCC_OscConfig+0x93c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a16      	ldr	r2, [pc, #88]	; (8001e9c <HAL_RCC_OscConfig+0x93c>)
 8001e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4a:	f7fe fec3 	bl	8000bd4 <HAL_GetTick>
 8001e4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e52:	e009      	b.n	8001e68 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e54:	f7fe febe 	bl	8000bd4 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b64      	cmp	r3, #100	; 0x64
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e3b1      	b.n	80025cc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <HAL_RCC_OscConfig+0x93c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0ef      	beq.n	8001e54 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d10d      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x940>
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <HAL_RCC_OscConfig+0x934>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4a02      	ldr	r2, [pc, #8]	; (8001e94 <HAL_RCC_OscConfig+0x934>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6213      	str	r3, [r2, #32]
 8001e90:	e03c      	b.n	8001f0c <HAL_RCC_OscConfig+0x9ac>
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000
 8001e98:	10908120 	.word	0x10908120
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10c      	bne.n	8001eca <HAL_RCC_OscConfig+0x96a>
 8001eb0:	4bc1      	ldr	r3, [pc, #772]	; (80021b8 <HAL_RCC_OscConfig+0xc58>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4ac0      	ldr	r2, [pc, #768]	; (80021b8 <HAL_RCC_OscConfig+0xc58>)
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	6213      	str	r3, [r2, #32]
 8001ebc:	4bbe      	ldr	r3, [pc, #760]	; (80021b8 <HAL_RCC_OscConfig+0xc58>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4abd      	ldr	r2, [pc, #756]	; (80021b8 <HAL_RCC_OscConfig+0xc58>)
 8001ec2:	f023 0304 	bic.w	r3, r3, #4
 8001ec6:	6213      	str	r3, [r2, #32]
 8001ec8:	e020      	b.n	8001f0c <HAL_RCC_OscConfig+0x9ac>
 8001eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ece:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2b05      	cmp	r3, #5
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x994>
 8001eda:	4bb7      	ldr	r3, [pc, #732]	; (80021b8 <HAL_RCC_OscConfig+0xc58>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	4ab6      	ldr	r2, [pc, #728]	; (80021b8 <HAL_RCC_OscConfig+0xc58>)
 8001ee0:	f043 0304 	orr.w	r3, r3, #4
 8001ee4:	6213      	str	r3, [r2, #32]
 8001ee6:	4bb4      	ldr	r3, [pc, #720]	; (80021b8 <HAL_RCC_OscConfig+0xc58>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4ab3      	ldr	r2, [pc, #716]	; (80021b8 <HAL_RCC_OscConfig+0xc58>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6213      	str	r3, [r2, #32]
 8001ef2:	e00b      	b.n	8001f0c <HAL_RCC_OscConfig+0x9ac>
 8001ef4:	4bb0      	ldr	r3, [pc, #704]	; (80021b8 <HAL_RCC_OscConfig+0xc58>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4aaf      	ldr	r2, [pc, #700]	; (80021b8 <HAL_RCC_OscConfig+0xc58>)
 8001efa:	f023 0301 	bic.w	r3, r3, #1
 8001efe:	6213      	str	r3, [r2, #32]
 8001f00:	4bad      	ldr	r3, [pc, #692]	; (80021b8 <HAL_RCC_OscConfig+0xc58>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4aac      	ldr	r2, [pc, #688]	; (80021b8 <HAL_RCC_OscConfig+0xc58>)
 8001f06:	f023 0304 	bic.w	r3, r3, #4
 8001f0a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8081 	beq.w	8002020 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1e:	f7fe fe59 	bl	8000bd4 <HAL_GetTick>
 8001f22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f26:	e00b      	b.n	8001f40 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f28:	f7fe fe54 	bl	8000bd4 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e345      	b.n	80025cc <HAL_RCC_OscConfig+0x106c>
 8001f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f44:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f48:	2202      	movs	r2, #2
 8001f4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f50:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	fa93 f2a3 	rbit	r2, r3
 8001f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f68:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f74:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	fa93 f2a3 	rbit	r2, r3
 8001f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f82:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f86:	601a      	str	r2, [r3, #0]
  return result;
 8001f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f90:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	095b      	lsrs	r3, r3, #5
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d102      	bne.n	8001fac <HAL_RCC_OscConfig+0xa4c>
 8001fa6:	4b84      	ldr	r3, [pc, #528]	; (80021b8 <HAL_RCC_OscConfig+0xc58>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	e013      	b.n	8001fd4 <HAL_RCC_OscConfig+0xa74>
 8001fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	fa93 f2a3 	rbit	r2, r3
 8001fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	4b79      	ldr	r3, [pc, #484]	; (80021b8 <HAL_RCC_OscConfig+0xc58>)
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fd8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001fdc:	2102      	movs	r1, #2
 8001fde:	6011      	str	r1, [r2, #0]
 8001fe0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fe4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	fa92 f1a2 	rbit	r1, r2
 8001fee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ff2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ff6:	6011      	str	r1, [r2, #0]
  return result;
 8001ff8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ffc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	fab2 f282 	clz	r2, r2
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f002 021f 	and.w	r2, r2, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f202 	lsl.w	r2, r1, r2
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d084      	beq.n	8001f28 <HAL_RCC_OscConfig+0x9c8>
 800201e:	e07f      	b.n	8002120 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002020:	f7fe fdd8 	bl	8000bd4 <HAL_GetTick>
 8002024:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002028:	e00b      	b.n	8002042 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7fe fdd3 	bl	8000bd4 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e2c4      	b.n	80025cc <HAL_RCC_OscConfig+0x106c>
 8002042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002046:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800204a:	2202      	movs	r2, #2
 800204c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002052:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	fa93 f2a3 	rbit	r2, r3
 800205c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002060:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800206e:	2202      	movs	r2, #2
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002076:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	fa93 f2a3 	rbit	r2, r3
 8002080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002084:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002088:	601a      	str	r2, [r3, #0]
  return result;
 800208a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002092:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002094:	fab3 f383 	clz	r3, r3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f043 0302 	orr.w	r3, r3, #2
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d102      	bne.n	80020ae <HAL_RCC_OscConfig+0xb4e>
 80020a8:	4b43      	ldr	r3, [pc, #268]	; (80021b8 <HAL_RCC_OscConfig+0xc58>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	e013      	b.n	80020d6 <HAL_RCC_OscConfig+0xb76>
 80020ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80020b6:	2202      	movs	r2, #2
 80020b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	fa93 f2a3 	rbit	r2, r3
 80020c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020cc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <HAL_RCC_OscConfig+0xc58>)
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020da:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80020de:	2102      	movs	r1, #2
 80020e0:	6011      	str	r1, [r2, #0]
 80020e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020e6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	fa92 f1a2 	rbit	r1, r2
 80020f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020f4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80020f8:	6011      	str	r1, [r2, #0]
  return result;
 80020fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020fe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	fab2 f282 	clz	r2, r2
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	f002 021f 	and.w	r2, r2, #31
 8002114:	2101      	movs	r1, #1
 8002116:	fa01 f202 	lsl.w	r2, r1, r2
 800211a:	4013      	ands	r3, r2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d184      	bne.n	800202a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002120:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002124:	2b01      	cmp	r3, #1
 8002126:	d105      	bne.n	8002134 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002128:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <HAL_RCC_OscConfig+0xc58>)
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	4a22      	ldr	r2, [pc, #136]	; (80021b8 <HAL_RCC_OscConfig+0xc58>)
 800212e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002132:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002138:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 8242 	beq.w	80025ca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002146:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <HAL_RCC_OscConfig+0xc58>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b08      	cmp	r3, #8
 8002150:	f000 8213 	beq.w	800257a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	2b02      	cmp	r3, #2
 8002162:	f040 8162 	bne.w	800242a <HAL_RCC_OscConfig+0xeca>
 8002166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800216e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002172:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002178:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	fa93 f2a3 	rbit	r2, r3
 8002182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002186:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800218a:	601a      	str	r2, [r3, #0]
  return result;
 800218c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002190:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002194:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	461a      	mov	r2, r3
 80021a8:	2300      	movs	r3, #0
 80021aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7fe fd12 	bl	8000bd4 <HAL_GetTick>
 80021b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b4:	e00c      	b.n	80021d0 <HAL_RCC_OscConfig+0xc70>
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021bc:	f7fe fd0a 	bl	8000bd4 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e1fd      	b.n	80025cc <HAL_RCC_OscConfig+0x106c>
 80021d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80021d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	fa93 f2a3 	rbit	r2, r3
 80021ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80021f4:	601a      	str	r2, [r3, #0]
  return result;
 80021f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80021fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b01      	cmp	r3, #1
 8002212:	d102      	bne.n	800221a <HAL_RCC_OscConfig+0xcba>
 8002214:	4bb0      	ldr	r3, [pc, #704]	; (80024d8 <HAL_RCC_OscConfig+0xf78>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	e027      	b.n	800226a <HAL_RCC_OscConfig+0xd0a>
 800221a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002222:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002226:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	fa93 f2a3 	rbit	r2, r3
 8002236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002244:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002248:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002252:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	fa93 f2a3 	rbit	r2, r3
 800225c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002260:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	4b9c      	ldr	r3, [pc, #624]	; (80024d8 <HAL_RCC_OscConfig+0xf78>)
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800226e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002272:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002276:	6011      	str	r1, [r2, #0]
 8002278:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800227c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	fa92 f1a2 	rbit	r1, r2
 8002286:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800228a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800228e:	6011      	str	r1, [r2, #0]
  return result;
 8002290:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002294:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	fab2 f282 	clz	r2, r2
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	f042 0220 	orr.w	r2, r2, #32
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	f002 021f 	and.w	r2, r2, #31
 80022aa:	2101      	movs	r1, #1
 80022ac:	fa01 f202 	lsl.w	r2, r1, r2
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d182      	bne.n	80021bc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b6:	4b88      	ldr	r3, [pc, #544]	; (80024d8 <HAL_RCC_OscConfig+0xf78>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80022ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	430b      	orrs	r3, r1
 80022d8:	497f      	ldr	r1, [pc, #508]	; (80024d8 <HAL_RCC_OscConfig+0xf78>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
 80022de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80022e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	fa93 f2a3 	rbit	r2, r3
 80022fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002302:	601a      	str	r2, [r3, #0]
  return result;
 8002304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002308:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800230c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002318:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	461a      	mov	r2, r3
 8002320:	2301      	movs	r3, #1
 8002322:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7fe fc56 	bl	8000bd4 <HAL_GetTick>
 8002328:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800232c:	e009      	b.n	8002342 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800232e:	f7fe fc51 	bl	8000bd4 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e144      	b.n	80025cc <HAL_RCC_OscConfig+0x106c>
 8002342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002346:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800234a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800234e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002354:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	fa93 f2a3 	rbit	r2, r3
 800235e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002362:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002366:	601a      	str	r2, [r3, #0]
  return result;
 8002368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002370:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002372:	fab3 f383 	clz	r3, r3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	095b      	lsrs	r3, r3, #5
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b01      	cmp	r3, #1
 8002384:	d102      	bne.n	800238c <HAL_RCC_OscConfig+0xe2c>
 8002386:	4b54      	ldr	r3, [pc, #336]	; (80024d8 <HAL_RCC_OscConfig+0xf78>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	e027      	b.n	80023dc <HAL_RCC_OscConfig+0xe7c>
 800238c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002390:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002394:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	fa93 f2a3 	rbit	r2, r3
 80023a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80023ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	fa93 f2a3 	rbit	r2, r3
 80023ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	4b3f      	ldr	r3, [pc, #252]	; (80024d8 <HAL_RCC_OscConfig+0xf78>)
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023e0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80023e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023e8:	6011      	str	r1, [r2, #0]
 80023ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ee:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	fa92 f1a2 	rbit	r1, r2
 80023f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023fc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002400:	6011      	str	r1, [r2, #0]
  return result;
 8002402:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002406:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	fab2 f282 	clz	r2, r2
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	f042 0220 	orr.w	r2, r2, #32
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	f002 021f 	and.w	r2, r2, #31
 800241c:	2101      	movs	r1, #1
 800241e:	fa01 f202 	lsl.w	r2, r1, r2
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d082      	beq.n	800232e <HAL_RCC_OscConfig+0xdce>
 8002428:	e0cf      	b.n	80025ca <HAL_RCC_OscConfig+0x106a>
 800242a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002432:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002436:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	fa93 f2a3 	rbit	r2, r3
 8002446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800244e:	601a      	str	r2, [r3, #0]
  return result;
 8002450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002454:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002458:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002464:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	461a      	mov	r2, r3
 800246c:	2300      	movs	r3, #0
 800246e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7fe fbb0 	bl	8000bd4 <HAL_GetTick>
 8002474:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002478:	e009      	b.n	800248e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247a:	f7fe fbab 	bl	8000bd4 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e09e      	b.n	80025cc <HAL_RCC_OscConfig+0x106c>
 800248e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002492:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002496:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800249a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	fa93 f2a3 	rbit	r2, r3
 80024aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80024b2:	601a      	str	r2, [r3, #0]
  return result;
 80024b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80024bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d104      	bne.n	80024dc <HAL_RCC_OscConfig+0xf7c>
 80024d2:	4b01      	ldr	r3, [pc, #4]	; (80024d8 <HAL_RCC_OscConfig+0xf78>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	e029      	b.n	800252c <HAL_RCC_OscConfig+0xfcc>
 80024d8:	40021000 	.word	0x40021000
 80024dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80024e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	fa93 f2a3 	rbit	r2, r3
 80024f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002506:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800250a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002514:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	fa93 f2a3 	rbit	r2, r3
 800251e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002522:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <HAL_RCC_OscConfig+0x1078>)
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002530:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002534:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002538:	6011      	str	r1, [r2, #0]
 800253a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800253e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	fa92 f1a2 	rbit	r1, r2
 8002548:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800254c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002550:	6011      	str	r1, [r2, #0]
  return result;
 8002552:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002556:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	fab2 f282 	clz	r2, r2
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	f042 0220 	orr.w	r2, r2, #32
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	f002 021f 	and.w	r2, r2, #31
 800256c:	2101      	movs	r1, #1
 800256e:	fa01 f202 	lsl.w	r2, r1, r2
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d180      	bne.n	800247a <HAL_RCC_OscConfig+0xf1a>
 8002578:	e027      	b.n	80025ca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800257a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e01e      	b.n	80025cc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_RCC_OscConfig+0x1078>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002596:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800259a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800259e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d10b      	bne.n	80025c6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80025ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d001      	beq.n	80025ca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000

080025dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b09e      	sub	sp, #120	; 0x78
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e162      	b.n	80028ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025f4:	4b90      	ldr	r3, [pc, #576]	; (8002838 <HAL_RCC_ClockConfig+0x25c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d910      	bls.n	8002624 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002602:	4b8d      	ldr	r3, [pc, #564]	; (8002838 <HAL_RCC_ClockConfig+0x25c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 0207 	bic.w	r2, r3, #7
 800260a:	498b      	ldr	r1, [pc, #556]	; (8002838 <HAL_RCC_ClockConfig+0x25c>)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	4b89      	ldr	r3, [pc, #548]	; (8002838 <HAL_RCC_ClockConfig+0x25c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e14a      	b.n	80028ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002630:	4b82      	ldr	r3, [pc, #520]	; (800283c <HAL_RCC_ClockConfig+0x260>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	497f      	ldr	r1, [pc, #508]	; (800283c <HAL_RCC_ClockConfig+0x260>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 80dc 	beq.w	8002808 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d13c      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xf6>
 8002658:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800265c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002668:	fab3 f383 	clz	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	d102      	bne.n	8002682 <HAL_RCC_ClockConfig+0xa6>
 800267c:	4b6f      	ldr	r3, [pc, #444]	; (800283c <HAL_RCC_ClockConfig+0x260>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	e00f      	b.n	80026a2 <HAL_RCC_ClockConfig+0xc6>
 8002682:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002686:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	667b      	str	r3, [r7, #100]	; 0x64
 8002690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002694:	663b      	str	r3, [r7, #96]	; 0x60
 8002696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800269e:	4b67      	ldr	r3, [pc, #412]	; (800283c <HAL_RCC_ClockConfig+0x260>)
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026a6:	65ba      	str	r2, [r7, #88]	; 0x58
 80026a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026aa:	fa92 f2a2 	rbit	r2, r2
 80026ae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80026b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026b2:	fab2 f282 	clz	r2, r2
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	f042 0220 	orr.w	r2, r2, #32
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	f002 021f 	and.w	r2, r2, #31
 80026c2:	2101      	movs	r1, #1
 80026c4:	fa01 f202 	lsl.w	r2, r1, r2
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d17b      	bne.n	80027c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e0f3      	b.n	80028ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d13c      	bne.n	8002754 <HAL_RCC_ClockConfig+0x178>
 80026da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ea:	fab3 f383 	clz	r3, r3
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	095b      	lsrs	r3, r3, #5
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d102      	bne.n	8002704 <HAL_RCC_ClockConfig+0x128>
 80026fe:	4b4f      	ldr	r3, [pc, #316]	; (800283c <HAL_RCC_ClockConfig+0x260>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	e00f      	b.n	8002724 <HAL_RCC_ClockConfig+0x148>
 8002704:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002708:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	647b      	str	r3, [r7, #68]	; 0x44
 8002712:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002716:	643b      	str	r3, [r7, #64]	; 0x40
 8002718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002720:	4b46      	ldr	r3, [pc, #280]	; (800283c <HAL_RCC_ClockConfig+0x260>)
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002728:	63ba      	str	r2, [r7, #56]	; 0x38
 800272a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800272c:	fa92 f2a2 	rbit	r2, r2
 8002730:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002734:	fab2 f282 	clz	r2, r2
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	f042 0220 	orr.w	r2, r2, #32
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	f002 021f 	and.w	r2, r2, #31
 8002744:	2101      	movs	r1, #1
 8002746:	fa01 f202 	lsl.w	r2, r1, r2
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d13a      	bne.n	80027c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0b2      	b.n	80028ba <HAL_RCC_ClockConfig+0x2de>
 8002754:	2302      	movs	r3, #2
 8002756:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	b2db      	uxtb	r3, r3
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b01      	cmp	r3, #1
 8002774:	d102      	bne.n	800277c <HAL_RCC_ClockConfig+0x1a0>
 8002776:	4b31      	ldr	r3, [pc, #196]	; (800283c <HAL_RCC_ClockConfig+0x260>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	e00d      	b.n	8002798 <HAL_RCC_ClockConfig+0x1bc>
 800277c:	2302      	movs	r3, #2
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
 8002788:	2302      	movs	r3, #2
 800278a:	623b      	str	r3, [r7, #32]
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	4b29      	ldr	r3, [pc, #164]	; (800283c <HAL_RCC_ClockConfig+0x260>)
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	2202      	movs	r2, #2
 800279a:	61ba      	str	r2, [r7, #24]
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	fa92 f2a2 	rbit	r2, r2
 80027a2:	617a      	str	r2, [r7, #20]
  return result;
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	fab2 f282 	clz	r2, r2
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	f042 0220 	orr.w	r2, r2, #32
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	f002 021f 	and.w	r2, r2, #31
 80027b6:	2101      	movs	r1, #1
 80027b8:	fa01 f202 	lsl.w	r2, r1, r2
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e079      	b.n	80028ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c6:	4b1d      	ldr	r3, [pc, #116]	; (800283c <HAL_RCC_ClockConfig+0x260>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f023 0203 	bic.w	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	491a      	ldr	r1, [pc, #104]	; (800283c <HAL_RCC_ClockConfig+0x260>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d8:	f7fe f9fc 	bl	8000bd4 <HAL_GetTick>
 80027dc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e0:	f7fe f9f8 	bl	8000bd4 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e061      	b.n	80028ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f6:	4b11      	ldr	r3, [pc, #68]	; (800283c <HAL_RCC_ClockConfig+0x260>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 020c 	and.w	r2, r3, #12
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	429a      	cmp	r2, r3
 8002806:	d1eb      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCC_ClockConfig+0x25c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d214      	bcs.n	8002840 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002816:	4b08      	ldr	r3, [pc, #32]	; (8002838 <HAL_RCC_ClockConfig+0x25c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 0207 	bic.w	r2, r3, #7
 800281e:	4906      	ldr	r1, [pc, #24]	; (8002838 <HAL_RCC_ClockConfig+0x25c>)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b04      	ldr	r3, [pc, #16]	; (8002838 <HAL_RCC_ClockConfig+0x25c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e040      	b.n	80028ba <HAL_RCC_ClockConfig+0x2de>
 8002838:	40022000 	.word	0x40022000
 800283c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_RCC_ClockConfig+0x2e8>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	491a      	ldr	r1, [pc, #104]	; (80028c4 <HAL_RCC_ClockConfig+0x2e8>)
 800285a:	4313      	orrs	r3, r2
 800285c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d009      	beq.n	800287e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800286a:	4b16      	ldr	r3, [pc, #88]	; (80028c4 <HAL_RCC_ClockConfig+0x2e8>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4912      	ldr	r1, [pc, #72]	; (80028c4 <HAL_RCC_ClockConfig+0x2e8>)
 800287a:	4313      	orrs	r3, r2
 800287c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800287e:	f000 f829 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 8002882:	4601      	mov	r1, r0
 8002884:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <HAL_RCC_ClockConfig+0x2e8>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800288c:	22f0      	movs	r2, #240	; 0xf0
 800288e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	fa92 f2a2 	rbit	r2, r2
 8002896:	60fa      	str	r2, [r7, #12]
  return result;
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	fab2 f282 	clz	r2, r2
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	40d3      	lsrs	r3, r2
 80028a2:	4a09      	ldr	r2, [pc, #36]	; (80028c8 <HAL_RCC_ClockConfig+0x2ec>)
 80028a4:	5cd3      	ldrb	r3, [r2, r3]
 80028a6:	fa21 f303 	lsr.w	r3, r1, r3
 80028aa:	4a08      	ldr	r2, [pc, #32]	; (80028cc <HAL_RCC_ClockConfig+0x2f0>)
 80028ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <HAL_RCC_ClockConfig+0x2f4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe f94a 	bl	8000b4c <HAL_InitTick>
  
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3778      	adds	r7, #120	; 0x78
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	080038dc 	.word	0x080038dc
 80028cc:	20000000 	.word	0x20000000
 80028d0:	20000004 	.word	0x20000004

080028d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b08b      	sub	sp, #44	; 0x2c
 80028d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	2300      	movs	r3, #0
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	2300      	movs	r3, #0
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80028ee:	4b29      	ldr	r3, [pc, #164]	; (8002994 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d002      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0x30>
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d003      	beq.n	800290a <HAL_RCC_GetSysClockFreq+0x36>
 8002902:	e03c      	b.n	800297e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002904:	4b24      	ldr	r3, [pc, #144]	; (8002998 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002906:	623b      	str	r3, [r7, #32]
      break;
 8002908:	e03c      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002910:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002914:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	fa92 f2a2 	rbit	r2, r2
 800291c:	607a      	str	r2, [r7, #4]
  return result;
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	fab2 f282 	clz	r2, r2
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	40d3      	lsrs	r3, r2
 8002928:	4a1c      	ldr	r2, [pc, #112]	; (800299c <HAL_RCC_GetSysClockFreq+0xc8>)
 800292a:	5cd3      	ldrb	r3, [r2, r3]
 800292c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800292e:	4b19      	ldr	r3, [pc, #100]	; (8002994 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	220f      	movs	r2, #15
 8002938:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	fa92 f2a2 	rbit	r2, r2
 8002940:	60fa      	str	r2, [r7, #12]
  return result;
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	fab2 f282 	clz	r2, r2
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	40d3      	lsrs	r3, r2
 800294c:	4a14      	ldr	r2, [pc, #80]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800294e:	5cd3      	ldrb	r3, [r2, r3]
 8002950:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800295c:	4a0e      	ldr	r2, [pc, #56]	; (8002998 <HAL_RCC_GetSysClockFreq+0xc4>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	fbb2 f2f3 	udiv	r2, r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
 800296c:	e004      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	4a0c      	ldr	r2, [pc, #48]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	623b      	str	r3, [r7, #32]
      break;
 800297c:	e002      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002980:	623b      	str	r3, [r7, #32]
      break;
 8002982:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002984:	6a3b      	ldr	r3, [r7, #32]
}
 8002986:	4618      	mov	r0, r3
 8002988:	372c      	adds	r7, #44	; 0x2c
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000
 8002998:	007a1200 	.word	0x007a1200
 800299c:	080038f4 	.word	0x080038f4
 80029a0:	08003904 	.word	0x08003904
 80029a4:	003d0900 	.word	0x003d0900

080029a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <HAL_RCC_GetHCLKFreq+0x14>)
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	20000000 	.word	0x20000000

080029c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80029c6:	f7ff ffef 	bl	80029a8 <HAL_RCC_GetHCLKFreq>
 80029ca:	4601      	mov	r1, r0
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029d4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80029d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	fa92 f2a2 	rbit	r2, r2
 80029e0:	603a      	str	r2, [r7, #0]
  return result;
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	fab2 f282 	clz	r2, r2
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	40d3      	lsrs	r3, r2
 80029ec:	4a04      	ldr	r2, [pc, #16]	; (8002a00 <HAL_RCC_GetPCLK1Freq+0x40>)
 80029ee:	5cd3      	ldrb	r3, [r2, r3]
 80029f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021000 	.word	0x40021000
 8002a00:	080038ec 	.word	0x080038ec

08002a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a0a:	f7ff ffcd 	bl	80029a8 <HAL_RCC_GetHCLKFreq>
 8002a0e:	4601      	mov	r1, r0
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a18:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	fa92 f2a2 	rbit	r2, r2
 8002a24:	603a      	str	r2, [r7, #0]
  return result;
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	fab2 f282 	clz	r2, r2
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	40d3      	lsrs	r3, r2
 8002a30:	4a04      	ldr	r2, [pc, #16]	; (8002a44 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a32:	5cd3      	ldrb	r3, [r2, r3]
 8002a34:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000
 8002a44:	080038ec 	.word	0x080038ec

08002a48 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b092      	sub	sp, #72	; 0x48
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 80d4 	beq.w	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6c:	4b4e      	ldr	r3, [pc, #312]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10e      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a78:	4b4b      	ldr	r3, [pc, #300]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	4a4a      	ldr	r2, [pc, #296]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a82:	61d3      	str	r3, [r2, #28]
 8002a84:	4b48      	ldr	r3, [pc, #288]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a96:	4b45      	ldr	r3, [pc, #276]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d118      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa2:	4b42      	ldr	r3, [pc, #264]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a41      	ldr	r2, [pc, #260]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aae:	f7fe f891 	bl	8000bd4 <HAL_GetTick>
 8002ab2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab6:	f7fe f88d 	bl	8000bd4 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b64      	cmp	r3, #100	; 0x64
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e169      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	4b38      	ldr	r3, [pc, #224]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ad4:	4b34      	ldr	r3, [pc, #208]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002adc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8084 	beq.w	8002bee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d07c      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002af4:	4b2c      	ldr	r3, [pc, #176]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002afe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b26      	ldr	r3, [pc, #152]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2301      	movs	r3, #1
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	461a      	mov	r2, r3
 8002b42:	2300      	movs	r3, #0
 8002b44:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b46:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d04b      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b56:	f7fe f83d 	bl	8000bd4 <HAL_GetTick>
 8002b5a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5e:	f7fe f839 	bl	8000bd4 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e113      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002b74:	2302      	movs	r3, #2
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b80:	2302      	movs	r3, #2
 8002b82:	623b      	str	r3, [r7, #32]
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	61fb      	str	r3, [r7, #28]
  return result;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d108      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ba2:	4b01      	ldr	r3, [pc, #4]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	e00d      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40007000 	.word	0x40007000
 8002bb0:	10908100 	.word	0x10908100
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	fa93 f3a3 	rbit	r3, r3
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	4b78      	ldr	r3, [pc, #480]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	613a      	str	r2, [r7, #16]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	fa92 f2a2 	rbit	r2, r2
 8002bce:	60fa      	str	r2, [r7, #12]
  return result;
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	fab2 f282 	clz	r2, r2
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	f002 021f 	and.w	r2, r2, #31
 8002be2:	2101      	movs	r1, #1
 8002be4:	fa01 f202 	lsl.w	r2, r1, r2
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0b7      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002bee:	4b6d      	ldr	r3, [pc, #436]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	496a      	ldr	r1, [pc, #424]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d105      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c08:	4b66      	ldr	r3, [pc, #408]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	4a65      	ldr	r2, [pc, #404]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c20:	4b60      	ldr	r3, [pc, #384]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	f023 0203 	bic.w	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	495d      	ldr	r1, [pc, #372]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d008      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c3e:	4b59      	ldr	r3, [pc, #356]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	4956      	ldr	r1, [pc, #344]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c5c:	4b51      	ldr	r3, [pc, #324]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	494e      	ldr	r1, [pc, #312]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c7a:	4b4a      	ldr	r3, [pc, #296]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f023 0210 	bic.w	r2, r3, #16
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	4947      	ldr	r1, [pc, #284]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002c98:	4b42      	ldr	r3, [pc, #264]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	493f      	ldr	r1, [pc, #252]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cb6:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f023 0220 	bic.w	r2, r3, #32
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4938      	ldr	r1, [pc, #224]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cd4:	4b33      	ldr	r3, [pc, #204]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	4930      	ldr	r1, [pc, #192]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d008      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cf2:	4b2c      	ldr	r3, [pc, #176]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	4929      	ldr	r1, [pc, #164]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d10:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	4921      	ldr	r1, [pc, #132]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	491a      	ldr	r1, [pc, #104]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002d4c:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	4912      	ldr	r1, [pc, #72]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d008      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d6a:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	490b      	ldr	r1, [pc, #44]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d94:	4903      	ldr	r1, [pc, #12]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3748      	adds	r7, #72	; 0x48
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40021000 	.word	0x40021000

08002da8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e09d      	b.n	8002ef6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d108      	bne.n	8002dd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dca:	d009      	beq.n	8002de0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	61da      	str	r2, [r3, #28]
 8002dd2:	e005      	b.n	8002de0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fd fcfc 	bl	80007f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e20:	d902      	bls.n	8002e28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	e002      	b.n	8002e2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002e36:	d007      	beq.n	8002e48 <HAL_SPI_Init+0xa0>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e40:	d002      	beq.n	8002e48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8a:	ea42 0103 	orr.w	r1, r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	0c1b      	lsrs	r3, r3, #16
 8002ea4:	f003 0204 	and.w	r2, r3, #4
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002ec4:	ea42 0103 	orr.w	r1, r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e040      	b.n	8002f92 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d106      	bne.n	8002f26 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7fd fcab 	bl	800087c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2224      	movs	r2, #36	; 0x24
 8002f2a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0201 	bic.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f8c1 	bl	80030c4 <UART_SetConfig>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e022      	b.n	8002f92 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fa8b 	bl	8003470 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0201 	orr.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fb12 	bl	80035b4 <UART_CheckIdleState>
 8002f90:	4603      	mov	r3, r0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b08a      	sub	sp, #40	; 0x28
 8002f9e:	af02      	add	r7, sp, #8
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	f040 8082 	bne.w	80030b8 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <HAL_UART_Transmit+0x26>
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e07a      	b.n	80030ba <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_UART_Transmit+0x38>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e073      	b.n	80030ba <HAL_UART_Transmit+0x120>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2221      	movs	r2, #33	; 0x21
 8002fe6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fe8:	f7fd fdf4 	bl	8000bd4 <HAL_GetTick>
 8002fec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	88fa      	ldrh	r2, [r7, #6]
 8002ff2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	88fa      	ldrh	r2, [r7, #6]
 8002ffa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003006:	d108      	bne.n	800301a <HAL_UART_Transmit+0x80>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d104      	bne.n	800301a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003010:	2300      	movs	r3, #0
 8003012:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	61bb      	str	r3, [r7, #24]
 8003018:	e003      	b.n	8003022 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800302a:	e02d      	b.n	8003088 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2200      	movs	r2, #0
 8003034:	2180      	movs	r1, #128	; 0x80
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fb05 	bl	8003646 <UART_WaitOnFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e039      	b.n	80030ba <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10b      	bne.n	8003064 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	881a      	ldrh	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003058:	b292      	uxth	r2, r2
 800305a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	3302      	adds	r3, #2
 8003060:	61bb      	str	r3, [r7, #24]
 8003062:	e008      	b.n	8003076 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	781a      	ldrb	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	b292      	uxth	r2, r2
 800306e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	3301      	adds	r3, #1
 8003074:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800308e:	b29b      	uxth	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1cb      	bne.n	800302c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2200      	movs	r2, #0
 800309c:	2140      	movs	r1, #64	; 0x40
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 fad1 	bl	8003646 <UART_WaitOnFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e005      	b.n	80030ba <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	e000      	b.n	80030ba <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80030b8:	2302      	movs	r3, #2
  }
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80030f2:	f023 030c 	bic.w	r3, r3, #12
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6812      	ldr	r2, [r2, #0]
 80030fa:	6979      	ldr	r1, [r7, #20]
 80030fc:	430b      	orrs	r3, r1
 80030fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	430a      	orrs	r2, r1
 8003138:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4aa8      	ldr	r2, [pc, #672]	; (80033e0 <UART_SetConfig+0x31c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d120      	bne.n	8003186 <UART_SetConfig+0xc2>
 8003144:	4ba7      	ldr	r3, [pc, #668]	; (80033e4 <UART_SetConfig+0x320>)
 8003146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	2b03      	cmp	r3, #3
 800314e:	d817      	bhi.n	8003180 <UART_SetConfig+0xbc>
 8003150:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <UART_SetConfig+0x94>)
 8003152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003156:	bf00      	nop
 8003158:	08003169 	.word	0x08003169
 800315c:	08003175 	.word	0x08003175
 8003160:	0800317b 	.word	0x0800317b
 8003164:	0800316f 	.word	0x0800316f
 8003168:	2301      	movs	r3, #1
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e0b5      	b.n	80032da <UART_SetConfig+0x216>
 800316e:	2302      	movs	r3, #2
 8003170:	77fb      	strb	r3, [r7, #31]
 8003172:	e0b2      	b.n	80032da <UART_SetConfig+0x216>
 8003174:	2304      	movs	r3, #4
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e0af      	b.n	80032da <UART_SetConfig+0x216>
 800317a:	2308      	movs	r3, #8
 800317c:	77fb      	strb	r3, [r7, #31]
 800317e:	e0ac      	b.n	80032da <UART_SetConfig+0x216>
 8003180:	2310      	movs	r3, #16
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e0a9      	b.n	80032da <UART_SetConfig+0x216>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a97      	ldr	r2, [pc, #604]	; (80033e8 <UART_SetConfig+0x324>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d124      	bne.n	80031da <UART_SetConfig+0x116>
 8003190:	4b94      	ldr	r3, [pc, #592]	; (80033e4 <UART_SetConfig+0x320>)
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003198:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800319c:	d011      	beq.n	80031c2 <UART_SetConfig+0xfe>
 800319e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031a2:	d817      	bhi.n	80031d4 <UART_SetConfig+0x110>
 80031a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031a8:	d011      	beq.n	80031ce <UART_SetConfig+0x10a>
 80031aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031ae:	d811      	bhi.n	80031d4 <UART_SetConfig+0x110>
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <UART_SetConfig+0xf8>
 80031b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b8:	d006      	beq.n	80031c8 <UART_SetConfig+0x104>
 80031ba:	e00b      	b.n	80031d4 <UART_SetConfig+0x110>
 80031bc:	2300      	movs	r3, #0
 80031be:	77fb      	strb	r3, [r7, #31]
 80031c0:	e08b      	b.n	80032da <UART_SetConfig+0x216>
 80031c2:	2302      	movs	r3, #2
 80031c4:	77fb      	strb	r3, [r7, #31]
 80031c6:	e088      	b.n	80032da <UART_SetConfig+0x216>
 80031c8:	2304      	movs	r3, #4
 80031ca:	77fb      	strb	r3, [r7, #31]
 80031cc:	e085      	b.n	80032da <UART_SetConfig+0x216>
 80031ce:	2308      	movs	r3, #8
 80031d0:	77fb      	strb	r3, [r7, #31]
 80031d2:	e082      	b.n	80032da <UART_SetConfig+0x216>
 80031d4:	2310      	movs	r3, #16
 80031d6:	77fb      	strb	r3, [r7, #31]
 80031d8:	e07f      	b.n	80032da <UART_SetConfig+0x216>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a83      	ldr	r2, [pc, #524]	; (80033ec <UART_SetConfig+0x328>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d124      	bne.n	800322e <UART_SetConfig+0x16a>
 80031e4:	4b7f      	ldr	r3, [pc, #508]	; (80033e4 <UART_SetConfig+0x320>)
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80031ec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031f0:	d011      	beq.n	8003216 <UART_SetConfig+0x152>
 80031f2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031f6:	d817      	bhi.n	8003228 <UART_SetConfig+0x164>
 80031f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031fc:	d011      	beq.n	8003222 <UART_SetConfig+0x15e>
 80031fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003202:	d811      	bhi.n	8003228 <UART_SetConfig+0x164>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <UART_SetConfig+0x14c>
 8003208:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800320c:	d006      	beq.n	800321c <UART_SetConfig+0x158>
 800320e:	e00b      	b.n	8003228 <UART_SetConfig+0x164>
 8003210:	2300      	movs	r3, #0
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e061      	b.n	80032da <UART_SetConfig+0x216>
 8003216:	2302      	movs	r3, #2
 8003218:	77fb      	strb	r3, [r7, #31]
 800321a:	e05e      	b.n	80032da <UART_SetConfig+0x216>
 800321c:	2304      	movs	r3, #4
 800321e:	77fb      	strb	r3, [r7, #31]
 8003220:	e05b      	b.n	80032da <UART_SetConfig+0x216>
 8003222:	2308      	movs	r3, #8
 8003224:	77fb      	strb	r3, [r7, #31]
 8003226:	e058      	b.n	80032da <UART_SetConfig+0x216>
 8003228:	2310      	movs	r3, #16
 800322a:	77fb      	strb	r3, [r7, #31]
 800322c:	e055      	b.n	80032da <UART_SetConfig+0x216>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a6f      	ldr	r2, [pc, #444]	; (80033f0 <UART_SetConfig+0x32c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d124      	bne.n	8003282 <UART_SetConfig+0x1be>
 8003238:	4b6a      	ldr	r3, [pc, #424]	; (80033e4 <UART_SetConfig+0x320>)
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003240:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003244:	d011      	beq.n	800326a <UART_SetConfig+0x1a6>
 8003246:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800324a:	d817      	bhi.n	800327c <UART_SetConfig+0x1b8>
 800324c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003250:	d011      	beq.n	8003276 <UART_SetConfig+0x1b2>
 8003252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003256:	d811      	bhi.n	800327c <UART_SetConfig+0x1b8>
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <UART_SetConfig+0x1a0>
 800325c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003260:	d006      	beq.n	8003270 <UART_SetConfig+0x1ac>
 8003262:	e00b      	b.n	800327c <UART_SetConfig+0x1b8>
 8003264:	2300      	movs	r3, #0
 8003266:	77fb      	strb	r3, [r7, #31]
 8003268:	e037      	b.n	80032da <UART_SetConfig+0x216>
 800326a:	2302      	movs	r3, #2
 800326c:	77fb      	strb	r3, [r7, #31]
 800326e:	e034      	b.n	80032da <UART_SetConfig+0x216>
 8003270:	2304      	movs	r3, #4
 8003272:	77fb      	strb	r3, [r7, #31]
 8003274:	e031      	b.n	80032da <UART_SetConfig+0x216>
 8003276:	2308      	movs	r3, #8
 8003278:	77fb      	strb	r3, [r7, #31]
 800327a:	e02e      	b.n	80032da <UART_SetConfig+0x216>
 800327c:	2310      	movs	r3, #16
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e02b      	b.n	80032da <UART_SetConfig+0x216>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a5b      	ldr	r2, [pc, #364]	; (80033f4 <UART_SetConfig+0x330>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d124      	bne.n	80032d6 <UART_SetConfig+0x212>
 800328c:	4b55      	ldr	r3, [pc, #340]	; (80033e4 <UART_SetConfig+0x320>)
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003294:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003298:	d011      	beq.n	80032be <UART_SetConfig+0x1fa>
 800329a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800329e:	d817      	bhi.n	80032d0 <UART_SetConfig+0x20c>
 80032a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032a4:	d011      	beq.n	80032ca <UART_SetConfig+0x206>
 80032a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032aa:	d811      	bhi.n	80032d0 <UART_SetConfig+0x20c>
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <UART_SetConfig+0x1f4>
 80032b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b4:	d006      	beq.n	80032c4 <UART_SetConfig+0x200>
 80032b6:	e00b      	b.n	80032d0 <UART_SetConfig+0x20c>
 80032b8:	2300      	movs	r3, #0
 80032ba:	77fb      	strb	r3, [r7, #31]
 80032bc:	e00d      	b.n	80032da <UART_SetConfig+0x216>
 80032be:	2302      	movs	r3, #2
 80032c0:	77fb      	strb	r3, [r7, #31]
 80032c2:	e00a      	b.n	80032da <UART_SetConfig+0x216>
 80032c4:	2304      	movs	r3, #4
 80032c6:	77fb      	strb	r3, [r7, #31]
 80032c8:	e007      	b.n	80032da <UART_SetConfig+0x216>
 80032ca:	2308      	movs	r3, #8
 80032cc:	77fb      	strb	r3, [r7, #31]
 80032ce:	e004      	b.n	80032da <UART_SetConfig+0x216>
 80032d0:	2310      	movs	r3, #16
 80032d2:	77fb      	strb	r3, [r7, #31]
 80032d4:	e001      	b.n	80032da <UART_SetConfig+0x216>
 80032d6:	2310      	movs	r3, #16
 80032d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e2:	d15c      	bne.n	800339e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80032e4:	7ffb      	ldrb	r3, [r7, #31]
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d827      	bhi.n	800333a <UART_SetConfig+0x276>
 80032ea:	a201      	add	r2, pc, #4	; (adr r2, 80032f0 <UART_SetConfig+0x22c>)
 80032ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f0:	08003315 	.word	0x08003315
 80032f4:	0800331d 	.word	0x0800331d
 80032f8:	08003325 	.word	0x08003325
 80032fc:	0800333b 	.word	0x0800333b
 8003300:	0800332b 	.word	0x0800332b
 8003304:	0800333b 	.word	0x0800333b
 8003308:	0800333b 	.word	0x0800333b
 800330c:	0800333b 	.word	0x0800333b
 8003310:	08003333 	.word	0x08003333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003314:	f7ff fb54 	bl	80029c0 <HAL_RCC_GetPCLK1Freq>
 8003318:	61b8      	str	r0, [r7, #24]
        break;
 800331a:	e013      	b.n	8003344 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800331c:	f7ff fb72 	bl	8002a04 <HAL_RCC_GetPCLK2Freq>
 8003320:	61b8      	str	r0, [r7, #24]
        break;
 8003322:	e00f      	b.n	8003344 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003324:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <UART_SetConfig+0x334>)
 8003326:	61bb      	str	r3, [r7, #24]
        break;
 8003328:	e00c      	b.n	8003344 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800332a:	f7ff fad3 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 800332e:	61b8      	str	r0, [r7, #24]
        break;
 8003330:	e008      	b.n	8003344 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003336:	61bb      	str	r3, [r7, #24]
        break;
 8003338:	e004      	b.n	8003344 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	77bb      	strb	r3, [r7, #30]
        break;
 8003342:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 8084 	beq.w	8003454 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	005a      	lsls	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	085b      	lsrs	r3, r3, #1
 8003356:	441a      	add	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003360:	b29b      	uxth	r3, r3
 8003362:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	2b0f      	cmp	r3, #15
 8003368:	d916      	bls.n	8003398 <UART_SetConfig+0x2d4>
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003370:	d212      	bcs.n	8003398 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	b29b      	uxth	r3, r3
 8003376:	f023 030f 	bic.w	r3, r3, #15
 800337a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	085b      	lsrs	r3, r3, #1
 8003380:	b29b      	uxth	r3, r3
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	b29a      	uxth	r2, r3
 8003388:	89fb      	ldrh	r3, [r7, #14]
 800338a:	4313      	orrs	r3, r2
 800338c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	89fa      	ldrh	r2, [r7, #14]
 8003394:	60da      	str	r2, [r3, #12]
 8003396:	e05d      	b.n	8003454 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	77bb      	strb	r3, [r7, #30]
 800339c:	e05a      	b.n	8003454 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800339e:	7ffb      	ldrb	r3, [r7, #31]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d836      	bhi.n	8003412 <UART_SetConfig+0x34e>
 80033a4:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <UART_SetConfig+0x2e8>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	080033d1 	.word	0x080033d1
 80033b0:	080033d9 	.word	0x080033d9
 80033b4:	080033fd 	.word	0x080033fd
 80033b8:	08003413 	.word	0x08003413
 80033bc:	08003403 	.word	0x08003403
 80033c0:	08003413 	.word	0x08003413
 80033c4:	08003413 	.word	0x08003413
 80033c8:	08003413 	.word	0x08003413
 80033cc:	0800340b 	.word	0x0800340b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d0:	f7ff faf6 	bl	80029c0 <HAL_RCC_GetPCLK1Freq>
 80033d4:	61b8      	str	r0, [r7, #24]
        break;
 80033d6:	e021      	b.n	800341c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033d8:	f7ff fb14 	bl	8002a04 <HAL_RCC_GetPCLK2Freq>
 80033dc:	61b8      	str	r0, [r7, #24]
        break;
 80033de:	e01d      	b.n	800341c <UART_SetConfig+0x358>
 80033e0:	40013800 	.word	0x40013800
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40004400 	.word	0x40004400
 80033ec:	40004800 	.word	0x40004800
 80033f0:	40004c00 	.word	0x40004c00
 80033f4:	40005000 	.word	0x40005000
 80033f8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033fc:	4b1b      	ldr	r3, [pc, #108]	; (800346c <UART_SetConfig+0x3a8>)
 80033fe:	61bb      	str	r3, [r7, #24]
        break;
 8003400:	e00c      	b.n	800341c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003402:	f7ff fa67 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 8003406:	61b8      	str	r0, [r7, #24]
        break;
 8003408:	e008      	b.n	800341c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800340a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800340e:	61bb      	str	r3, [r7, #24]
        break;
 8003410:	e004      	b.n	800341c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	77bb      	strb	r3, [r7, #30]
        break;
 800341a:	bf00      	nop
    }

    if (pclk != 0U)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d018      	beq.n	8003454 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	085a      	lsrs	r2, r3, #1
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	441a      	add	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	b29b      	uxth	r3, r3
 8003436:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b0f      	cmp	r3, #15
 800343c:	d908      	bls.n	8003450 <UART_SetConfig+0x38c>
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003444:	d204      	bcs.n	8003450 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	e001      	b.n	8003454 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003460:	7fbb      	ldrb	r3, [r7, #30]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3720      	adds	r7, #32
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	007a1200 	.word	0x007a1200

08003470 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354c:	2b00      	cmp	r3, #0
 800354e:	d01a      	beq.n	8003586 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800356e:	d10a      	bne.n	8003586 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	605a      	str	r2, [r3, #4]
  }
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035c4:	f7fd fb06 	bl	8000bd4 <HAL_GetTick>
 80035c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d10e      	bne.n	80035f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f82d 	bl	8003646 <UART_WaitOnFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e023      	b.n	800363e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b04      	cmp	r3, #4
 8003602:	d10e      	bne.n	8003622 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f817 	bl	8003646 <UART_WaitOnFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e00d      	b.n	800363e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2220      	movs	r2, #32
 8003626:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b09c      	sub	sp, #112	; 0x70
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	4613      	mov	r3, r2
 8003654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003656:	e0a5      	b.n	80037a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800365e:	f000 80a1 	beq.w	80037a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003662:	f7fd fab7 	bl	8000bd4 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800366e:	429a      	cmp	r2, r3
 8003670:	d302      	bcc.n	8003678 <UART_WaitOnFlagUntilTimeout+0x32>
 8003672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003674:	2b00      	cmp	r3, #0
 8003676:	d13e      	bne.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003680:	e853 3f00 	ldrex	r3, [r3]
 8003684:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003688:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800368c:	667b      	str	r3, [r7, #100]	; 0x64
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003696:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003698:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800369c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800369e:	e841 2300 	strex	r3, r2, [r1]
 80036a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80036a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1e6      	bne.n	8003678 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3308      	adds	r3, #8
 80036b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036bc:	f023 0301 	bic.w	r3, r3, #1
 80036c0:	663b      	str	r3, [r7, #96]	; 0x60
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3308      	adds	r3, #8
 80036c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80036cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036d2:	e841 2300 	strex	r3, r2, [r1]
 80036d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80036d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e5      	bne.n	80036aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e067      	b.n	80037c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d04f      	beq.n	80037a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800370e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003712:	d147      	bne.n	80037a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800371c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003726:	e853 3f00 	ldrex	r3, [r3]
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003732:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373c:	637b      	str	r3, [r7, #52]	; 0x34
 800373e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003740:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003744:	e841 2300 	strex	r3, r2, [r1]
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e6      	bne.n	800371e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3308      	adds	r3, #8
 8003756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	613b      	str	r3, [r7, #16]
   return(result);
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	66bb      	str	r3, [r7, #104]	; 0x68
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3308      	adds	r3, #8
 800376e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003770:	623a      	str	r2, [r7, #32]
 8003772:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	69f9      	ldr	r1, [r7, #28]
 8003776:	6a3a      	ldr	r2, [r7, #32]
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	61bb      	str	r3, [r7, #24]
   return(result);
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e5      	bne.n	8003750 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2220      	movs	r2, #32
 800378e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e010      	b.n	80037c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	69da      	ldr	r2, [r3, #28]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	4013      	ands	r3, r2
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	461a      	mov	r2, r3
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	429a      	cmp	r2, r3
 80037c0:	f43f af4a 	beq.w	8003658 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3770      	adds	r7, #112	; 0x70
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b085      	sub	sp, #20
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80037d6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80037da:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	4013      	ands	r3, r2
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003804:	b084      	sub	sp, #16
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	f107 0014 	add.w	r0, r7, #20
 8003812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	b004      	add	sp, #16
 8003844:	4770      	bx	lr
	...

08003848 <__libc_init_array>:
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	4d0d      	ldr	r5, [pc, #52]	; (8003880 <__libc_init_array+0x38>)
 800384c:	4c0d      	ldr	r4, [pc, #52]	; (8003884 <__libc_init_array+0x3c>)
 800384e:	1b64      	subs	r4, r4, r5
 8003850:	10a4      	asrs	r4, r4, #2
 8003852:	2600      	movs	r6, #0
 8003854:	42a6      	cmp	r6, r4
 8003856:	d109      	bne.n	800386c <__libc_init_array+0x24>
 8003858:	4d0b      	ldr	r5, [pc, #44]	; (8003888 <__libc_init_array+0x40>)
 800385a:	4c0c      	ldr	r4, [pc, #48]	; (800388c <__libc_init_array+0x44>)
 800385c:	f000 f820 	bl	80038a0 <_init>
 8003860:	1b64      	subs	r4, r4, r5
 8003862:	10a4      	asrs	r4, r4, #2
 8003864:	2600      	movs	r6, #0
 8003866:	42a6      	cmp	r6, r4
 8003868:	d105      	bne.n	8003876 <__libc_init_array+0x2e>
 800386a:	bd70      	pop	{r4, r5, r6, pc}
 800386c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003870:	4798      	blx	r3
 8003872:	3601      	adds	r6, #1
 8003874:	e7ee      	b.n	8003854 <__libc_init_array+0xc>
 8003876:	f855 3b04 	ldr.w	r3, [r5], #4
 800387a:	4798      	blx	r3
 800387c:	3601      	adds	r6, #1
 800387e:	e7f2      	b.n	8003866 <__libc_init_array+0x1e>
 8003880:	08003914 	.word	0x08003914
 8003884:	08003914 	.word	0x08003914
 8003888:	08003914 	.word	0x08003914
 800388c:	08003918 	.word	0x08003918

08003890 <memset>:
 8003890:	4402      	add	r2, r0
 8003892:	4603      	mov	r3, r0
 8003894:	4293      	cmp	r3, r2
 8003896:	d100      	bne.n	800389a <memset+0xa>
 8003898:	4770      	bx	lr
 800389a:	f803 1b01 	strb.w	r1, [r3], #1
 800389e:	e7f9      	b.n	8003894 <memset+0x4>

080038a0 <_init>:
 80038a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a2:	bf00      	nop
 80038a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a6:	bc08      	pop	{r3}
 80038a8:	469e      	mov	lr, r3
 80038aa:	4770      	bx	lr

080038ac <_fini>:
 80038ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ae:	bf00      	nop
 80038b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b2:	bc08      	pop	{r3}
 80038b4:	469e      	mov	lr, r3
 80038b6:	4770      	bx	lr
